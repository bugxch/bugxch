<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>C/C&#43;&#43; - 标签 - Dive Into Think</title>
        <link>https://bugxch.github.io/tags/c/c&#43;&#43;/</link>
        <description>C/C&#43;&#43; - 标签 - Dive Into Think</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>bugxch@126.com (bugxch)</managingEditor>
            <webMaster>bugxch@126.com (bugxch)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><atom:link href="https://bugxch.github.io/tags/c/c&#43;&#43;/" rel="self" type="application/rss+xml" /><item>
    <title>Factory Method模式精解（C&#43;&#43;版本）</title>
    <link>https://bugxch.github.io/dp_4/</link>
    <pubDate>Sun, 02 May 2021 21:43:54 &#43;0800</pubDate>
    <author>bugxch</author>
    <guid>https://bugxch.github.io/dp_4/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://pic.imgdb.cn/item/608eae16d1a9ae528f502e1a.png" referrerpolicy="no-referrer">
            </div><p>继续之前的设计模式第四弹，这次是大名鼎鼎的工厂方法模式。</p>
<h2 id="使用情景">使用情景</h2>
<blockquote>
<p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。Factory Method是创建型模式，使一个类的实例化延迟到其子类。</p>
</blockquote>
<p>Factory有工厂的意思，简单来看，这个模式利用到了上一篇的<a href="https://bugxch.github.io/dp_3/" target="_blank" rel="noopener noreffer">Template Method模式</a>用来生成具体的实例，说得更清楚一点，工厂方法模式将创建对象的过程延迟到子类实现，其他的父类的步骤保持完整。</p>
<h2 id="问题引入">问题引入</h2>
<p>想象一个养殖业的农民，他刚开始仅仅在养马场养马，每个马都需要养殖长大之后在市面出售，后来他获得足够的利润之后，扩展业务也养牛，但是在牛场养牛，每头牛也是需要养殖长大之后在市面出售的。在刚开始的时候，我们需要记录每只马的养殖过程，后面还要记录它的售价。如果你前面只有养马的程序（包括生产、饲养、销售的过程），比如下面这样</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span><span class="lnt">9
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Client</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">CreateHorse</span><span class="p">();</span>
    <span class="n">FeedHorse</span><span class="p">();</span>
    <span class="n">SellHorse</span><span class="p">();</span>
<span class="k">private</span><span class="o">:</span>
    <span class="n">Horse</span> <span class="n">horse_</span><span class="p">;</span>
<span class="p">}</span>

</code></pre></td></tr></table>
</div>
</div><p>需要添加金养牛的程序，那么大多数情况会出现一个<code>switch</code>的分支，随着饲养的品种越来越多，最后会在生产、饲养和售卖的各个过程中出现多个<code>switch</code>分支。如果我是农场主，代码会陷入“分支瘫痪”，对维护这一套代码感到厌烦。比如下面这样</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Client</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">CreateAnimal</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">animaltype</span> <span class="o">==</span> <span class="s">&#34;horse&#34;</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// create horse
</span><span class="c1"></span>        <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">animaltype</span> <span class="o">==</span> <span class="s">&#34;cow&#34;</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// ceate cow
</span><span class="c1"></span>        <span class="p">}</span> <span class="p">...</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// create others
</span><span class="c1"></span>        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">FeedAnimal</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">animaltype</span> <span class="o">==</span> <span class="s">&#34;horse&#34;</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// feed horse
</span><span class="c1"></span>        <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">animaltype</span> <span class="o">==</span> <span class="s">&#34;cow&#34;</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// feed cow
</span><span class="c1"></span>        <span class="p">}</span> <span class="p">...</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// feed others
</span><span class="c1"></span>        <span class="p">}</span>
    <span class="p">}</span>
    <span class="n">SellAnimal</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">animaltype</span> <span class="o">==</span> <span class="s">&#34;horse&#34;</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// sell horse
</span><span class="c1"></span>        <span class="p">}</span> <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">animaltype</span> <span class="o">==</span> <span class="s">&#34;cow&#34;</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// sell cow
</span><span class="c1"></span>        <span class="p">}</span> <span class="p">...</span>
        <span class="k">else</span> <span class="p">{</span>
            <span class="c1">// sell others
</span><span class="c1"></span>        <span class="p">}</span>

    <span class="p">}</span>
<span class="k">private</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">animaltype</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><p>这样的方案有什么明显的缺点呢？</p>
<ul>
<li><strong>高耦合</strong>，这个大类中的函数有一处需要添加分支，每个函数就都需要变化，但是每个函数实际是售卖动物的不耦合的步骤（生产不影响饲养，饲养不影响售卖），这些步骤之间耦合太紧，导致“霰弹式修改”；</li>
<li><strong>分支瘫痪</strong>，添加的类别越多，代码的<code>if/else/switch</code>的分支越多，最后陷入分支瘫痪的状态。</li>
</ul>
<h2 id="解决方案">解决方案</h2>
<h2 id="uml表示及其代码">UML表示及其代码</h2>
<h2 id="理解及体会">理解及体会</h2>
<hr>
<figure>
     <figcaption>
            <h4>欢迎扫码关注我的公众号</h4>
        </figcaption>
</figure>]]></description>
</item><item>
    <title>Template Method模式精解（C&#43;&#43;版本）</title>
    <link>https://bugxch.github.io/dp_3/</link>
    <pubDate>Fri, 30 Apr 2021 19:52:15 &#43;0800</pubDate>
    <author>bugxch</author>
    <guid>https://bugxch.github.io/dp_3/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://pic.imgdb.cn/item/608bef5dd1a9ae528f268767.png" referrerpolicy="no-referrer">
            </div><p>设计模式第三弹，设计模式<strong>行为型模式</strong>中的模板方法，也比较简单。</p>
<h2 id="使用情景">使用情景</h2>
<blockquote>
<p>定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。Template Method是行为型模式，使得子类可以不改变算法的结构（步骤）即可重定义该算法的某些特定步骤。</p>
</blockquote>
<p>模板方法将整个算法转换为一系列独立的步骤， 以便子类能对其进行扩展， 同时还可让超类中所定义的结构保持完整。可以设想我们上学时候临摹毛笔字，你可以使用墨汁沿着田字格中的汉字临摹，也可以使用红墨水临摹，无论用哪种颜色的墨水，最后完成的字的形状是一样的。</p>
<p></p>
<p>汉字的字形就是模板，每个学生使用不同的工具或者墨水按照模板习字，就是模板方法。</p>
<h2 id="问题引入">问题引入</h2>
<p>Template Method就是带有模板功能的模式，它有下面的特点：</p>
<ol>
<li>组成模板的方法被定义在父类中，但是这些方法是抽象方法，具体的方法实现由各个子类实现；</li>
<li>父类中定义了<strong>处理流程的框架</strong>，这个流程由上面定义的这些方法<strong>按照特定的步骤完成</strong>。</li>
</ol>
<p>打一个比方，如果我们村里的每个人盖一座房子，无论是谁都需要完成如下的步骤，准备材料，设计图纸，雇佣施工队，开工建设，完成这些步骤之后才能盖起一座完整的房子。但是不同的人使用的材料不同，设计的图纸不同，施工队的质量也不一样，依照主人的品味和资金实力每一个步骤不同的人做就有不同的效果。这里的所有步骤就是模板方法，不同的人就是子类。</p>
<h2 id="uml表示及代码">UML表示及代码</h2>
<p>参考《图解设计模式》中第三章的例子，UML图及代码如下所示</p>
<p>
每个类的作用如下
</p>
<ul>
<li><code>AbstractDisplay</code>是抽象类，定义了整个的<strong>流程框架</strong>，即方法<code>display()</code>，该方法又由3个抽象方法实现<code>open(), print(), close()</code>；</li>
<li><code>CharDisplay</code>和<code>StringDisplay</code>是具体的继承类，它们实现了抽象类中的抽象方法。
仅仅从抽象类看不出来每个抽象方法的具体实现，这些方法由每个类具体负责，上面的所有的类的具体代码如下。</li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span><span class="lnt">77
</span><span class="lnt">78
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="k">class</span> <span class="nc">AbstractDisplay</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">open</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">virtual</span> <span class="kt">void</span> <span class="nf">print</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">virtual</span> <span class="kt">void</span> <span class="nf">close</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">virtual</span> <span class="kt">void</span> <span class="nf">display</span><span class="p">()</span> <span class="k">final</span>
	<span class="p">{</span>
		<span class="n">open</span><span class="p">();</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">5</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">print</span><span class="p">();</span>
		<span class="p">}</span>
		<span class="n">close</span><span class="p">();</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">CharDisplay</span><span class="o">:</span> <span class="k">public</span> <span class="n">AbstractDisplay</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
	<span class="n">CharDisplay</span><span class="p">(</span><span class="kt">char</span> <span class="n">ch</span> <span class="o">=</span> <span class="sc">&#39;h&#39;</span><span class="p">)</span> <span class="o">:</span> <span class="n">ch_</span><span class="p">(</span><span class="n">ch</span><span class="p">)</span> <span class="p">{};</span>
	<span class="kt">void</span> <span class="nf">open</span><span class="p">()</span> <span class="k">override</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;&lt;&lt;&#34;</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="kt">void</span> <span class="nf">close</span><span class="p">()</span> <span class="k">override</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;&gt;&gt;</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="kt">void</span> <span class="nf">print</span><span class="p">()</span> <span class="k">override</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">ch_</span><span class="p">;</span>
	<span class="p">}</span>
<span class="k">private</span><span class="o">:</span>
	<span class="kt">char</span> <span class="n">ch_</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">StringDisplay</span> <span class="o">:</span> <span class="k">public</span> <span class="n">AbstractDisplay</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
	<span class="n">StringDisplay</span><span class="p">(</span><span class="n">string</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&#34; &#34;</span><span class="p">,</span> <span class="kt">int</span> <span class="n">width</span> <span class="o">=</span> <span class="mi">10</span><span class="p">)</span> <span class="o">:</span><span class="n">width_</span><span class="p">(</span><span class="n">width</span><span class="p">),</span> <span class="n">str_</span><span class="p">(</span><span class="n">str</span><span class="p">)</span> <span class="p">{};</span>
	<span class="kt">void</span> <span class="nf">open</span><span class="p">()</span> <span class="k">override</span>
	<span class="p">{</span>
		<span class="n">printLine</span><span class="p">();</span>
	<span class="p">}</span>
	<span class="kt">void</span> <span class="nf">print</span><span class="p">()</span> <span class="k">override</span>
	<span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;|&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">str_</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;|</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="kt">void</span> <span class="nf">close</span><span class="p">()</span> <span class="k">override</span>
	<span class="p">{</span>
		<span class="n">printLine</span><span class="p">();</span>
	<span class="p">}</span>
<span class="k">private</span><span class="o">:</span>
	<span class="n">string</span> <span class="n">str_</span><span class="p">;</span>
	<span class="kt">int</span> <span class="n">width_</span><span class="p">;</span>
	<span class="kt">void</span> <span class="nf">printLine</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;+&#34;</span><span class="p">;</span>
		<span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">width_</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
			<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;-&#34;</span><span class="p">;</span>
		<span class="p">}</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;+</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">AbstractDisplay</span><span class="o">*</span> <span class="n">display</span> <span class="o">=</span> <span class="k">new</span> <span class="n">CharDisplay</span><span class="p">(</span><span class="sc">&#39;H&#39;</span><span class="p">);</span>
	<span class="n">display</span><span class="o">-&gt;</span><span class="n">display</span><span class="p">();</span>
	<span class="k">delete</span> <span class="n">display</span><span class="p">;</span>
	<span class="n">display</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringDisplay</span><span class="p">(</span><span class="s">&#34;Hello World!&#34;</span><span class="p">);</span>
	<span class="n">display</span><span class="o">-&gt;</span><span class="n">display</span><span class="p">();</span>
	<span class="k">delete</span> <span class="n">display</span><span class="p">;</span>
	<span class="n">display</span> <span class="o">=</span> <span class="k">new</span> <span class="n">StringDisplay</span><span class="p">(</span><span class="s">&#34;Hello haha!&#34;</span><span class="p">);</span>
	<span class="n">display</span><span class="o">-&gt;</span><span class="n">display</span><span class="p">();</span>
	<span class="k">delete</span> <span class="n">display</span><span class="p">;</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>运行结果如下，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="s">&lt;&lt;HHHHH</span>&gt;&gt;
+----------+
<span class="p">|</span>Hello World!<span class="p">|</span>
<span class="p">|</span>Hello World!<span class="p">|</span>
<span class="p">|</span>Hello World!<span class="p">|</span>
<span class="p">|</span>Hello World!<span class="p">|</span>
<span class="p">|</span>Hello World!<span class="p">|</span>
+----------+
+----------+
<span class="p">|</span>Hello haha!<span class="p">|</span>
<span class="p">|</span>Hello haha!<span class="p">|</span>
<span class="p">|</span>Hello haha!<span class="p">|</span>
<span class="p">|</span>Hello haha!<span class="p">|</span>
<span class="p">|</span>Hello haha!<span class="p">|</span>
+----------+
</code></pre></td></tr></table>
</div>
</div><hr>
<figure>
     <figcaption>
            <h4>欢迎扫码关注我的公众号</h4>
        </figcaption>
</figure>]]></description>
</item><item>
    <title>Adapter模式精解（C&#43;&#43;版本）</title>
    <link>https://bugxch.github.io/dp_2/</link>
    <pubDate>Thu, 29 Apr 2021 22:39:41 &#43;0800</pubDate>
    <author>bugxch</author>
    <guid>https://bugxch.github.io/dp_2/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://pic.imgdb.cn/item/608ac85bd1a9ae528fde126e.png" referrerpolicy="no-referrer">
            </div><p>本篇是设计模式第二篇，适配器模式，比较好理解。</p>
<h2 id="使用情景">使用情景</h2>
<blockquote>
<p>适配器模式是一种<strong>结构型</strong>设计模式， 它能使接口<strong>不兼容</strong>的对象能够相互合作。</p>
</blockquote>
<p>如果你有出国的经验，那么在出国前肯定会在淘宝买一个电源的转接插头带在身上，在国外旅行时为手机或者PC充电。为什么需要这个东西？参考这篇<a href="https://www.skyscanner.net/news/international-travel-plug-adapter-guide" target="_blank" rel="noopener noreffer">国际旅行电源适配器指南</a>，从文章中可以看出，每个不同的国家和地区的电源插座的形状和电压都不同，比如中国家用交流电是220V，而印度是230V，从电压的角度出发，你也需要一个东西将230V的电源转换成为稳定的220V，才能给电脑供电。</p>
<h2 id="问题引入">问题引入</h2>
<p>那我们的问题自然就是如果我去印度旅行，如何使用工具将230V的电源转换成220V呢？</p>
<h2 id="解决方案">解决方案</h2>
<p>解决方案也很简单，使用一个电源适配器即可，它负责将230V电源转换成为220V供我使用。</p>
<h2 id="uml表示及代码">UML表示及代码</h2>
<p>参考《图解设计模式》的章节，我们有两种适配器模式。</p>
<h3 id="基于继承的适配器模式">基于继承的适配器模式</h3>
<p></p>
<p>上面的图示中，<code>Banner</code>就是印度的230V电源，<code>PrintBanner</code>是电源适配器，<code>Print</code>表示我的电脑插头，<code>Main</code>函数是我自己。具体的C++代码如下所示</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">class</span> <span class="nc">Banner</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
	<span class="n">Banner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="p">)</span> <span class="o">:</span> <span class="n">str_</span><span class="p">(</span><span class="n">str</span><span class="p">)</span> <span class="p">{}</span>
	<span class="kt">void</span> <span class="nf">showWithParen</span><span class="p">()</span> <span class="k">const</span>
	<span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;(&#34;</span>  <span class="o">&lt;&lt;</span> <span class="n">str_</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;)&#34;</span> <span class="o">&lt;&lt;</span>  <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="kt">void</span> <span class="nf">showWithAster</span><span class="p">()</span> <span class="k">const</span>
	<span class="p">{</span>
		<span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;*&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">str_</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;*&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="o">::</span><span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
<span class="k">private</span><span class="o">:</span>
	<span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str_</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">Print</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
	<span class="k">virtual</span> <span class="kt">void</span> <span class="n">printWeak</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
	<span class="k">virtual</span> <span class="kt">void</span> <span class="nf">printStrong</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">PrintBanner</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Print</span><span class="p">,</span> <span class="n">Banner</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
	<span class="n">PrintBanner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span><span class="p">)</span> <span class="o">:</span> <span class="n">Banner</span><span class="p">(</span><span class="n">str</span><span class="p">)</span> <span class="p">{}</span>
	<span class="kt">void</span> <span class="nf">printWeak</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span>
		<span class="n">showWithParen</span><span class="p">();</span>
	<span class="p">}</span>
	<span class="kt">void</span> <span class="nf">printStrong</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span>
		<span class="n">showWithAster</span><span class="p">();</span>
	<span class="p">}</span>
<span class="p">};</span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="k">auto</span> <span class="n">printBanner</span> <span class="o">=</span> <span class="k">new</span> <span class="n">PrintBanner</span><span class="p">(</span><span class="s">&#34;hello&#34;</span><span class="p">);</span>
	<span class="n">printBanner</span><span class="o">-&gt;</span><span class="n">printWeak</span><span class="p">();</span>
	<span class="n">printBanner</span><span class="o">-&gt;</span><span class="n">printStrong</span><span class="p">();</span>

	<span class="k">delete</span> <span class="n">printBanner</span><span class="p">;</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="基于委托的适配器模式">基于委托的适配器模式</h3>
<p>另外一种形式是基于委托的模式，这里的“委托”意思是我将本来需要我自己做的事情，交给别人来做，适配器<code>PrintBanner</code>将接口的功能<strong>委托</strong>给<code>Banner</code>去做。</p>
<p>
具体的程序代码如下（与基于继承的代码仅仅在<code>PrintBanner</code>的类中的内容不同）</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">PrintBanner</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Print</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
	<span class="n">PrintBanner</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">str</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">banner_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Banner</span><span class="p">(</span><span class="n">str</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="kt">void</span> <span class="nf">printWeak</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span>
		<span class="n">banner_</span><span class="o">-&gt;</span><span class="n">showWithParen</span><span class="p">();</span>
	<span class="p">}</span>
	<span class="kt">void</span> <span class="nf">printStrong</span><span class="p">()</span> <span class="k">override</span> <span class="p">{</span>
		<span class="n">banner_</span><span class="o">-&gt;</span><span class="n">showWithAster</span><span class="p">();</span>
	<span class="p">}</span>
	<span class="o">~</span><span class="n">PrintBanner</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">if</span> <span class="p">(</span><span class="n">banner_</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
			<span class="k">delete</span> <span class="n">banner_</span><span class="p">;</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="k">private</span><span class="o">:</span>
	<span class="n">Banner</span><span class="o">*</span> <span class="n">banner_</span><span class="p">;</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><hr>
<figure>
     <figcaption>
            <h4>欢迎扫码关注我的公众号</h4>
        </figcaption>
</figure>]]></description>
</item><item>
    <title>Iterator模式精解（C&#43;&#43;版本）</title>
    <link>https://bugxch.github.io/dp_1/</link>
    <pubDate>Sat, 10 Apr 2021 22:15:09 &#43;0800</pubDate>
    <author>bugxch</author>
    <guid>https://bugxch.github.io/dp_1/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://pic.imgdb.cn/item/6086d967d1a9ae528f307ce1.jpg" referrerpolicy="no-referrer">
            </div><p>从本文章开始，参考结城浩的<a href="https://www.ituring.com.cn/book/1811" target="_blank" rel="noopener noreffer">《图解设计模式》</a>写23种设计模式的系列介绍文章，结合网络上其他的设计模式的内容，使用C++的语言编写这些设计模式，记录自己的设计模式的心得。</p>
<h2 id="设计模式分类">设计模式分类</h2>
<p>在开始设计模式的系列文章之前，先对设计模式的分类做一个说明，下面的说明摘选自<a href="http://c.biancheng.net/view/1320.html" target="_blank" rel="noopener noreffer">GoF 的 23 种设计模式的分类和功能</a>。</p>
<p>设计模式有两种分类方法，即根据模式的目的来分和根据模式的作用的范围来分。</p>
<h3 id="根据目的来分">根据目的来分</h3>
<p>根据模式是用来完成什么工作来划分，这种方式可分为创建型模式、结构型模式和行为型模式 3 种。</p>
<ul>
<li><strong>创建型模式</strong>：用于描述“怎样创建对象”，它的主要特点是“将对象的创建与使用分离”。GoF 中提供了单例、原型、工厂方法、抽象工厂、建造者等 5 种创建型模式。</li>
<li><strong>结构型模式</strong>：用于描述如何将类或对象按某种布局组成更大的结构，GoF 中提供了代理、适配器、桥接、装饰、外观、享元、组合等 7 种结构型模式。</li>
<li><strong>行为型模式</strong>：用于描述类或对象之间怎样相互协作共同完成单个对象都无法单独完成的任务，以及怎样分配职责。GoF 中提供了模板方法、策略、命令、职责链、状态、观察者、中介者、迭代器、访问者、备忘录、解释器等 11 种行为型模式。
###gg 根据作用范围来分
根据模式是主要用于类上还是主要用于对象上来分，这种方式可分为类模式和对象模式两种。</li>
<li>类模式：用于处理类与子类之间的关系，这些关系通过继承来建立，是静态的，在编译时刻便确定下来了。GoF中的工厂方法、（类）适配器、模板方法、解释器属于该模式。</li>
<li>对象模式：用于处理对象之间的关系，这些关系可以通过组合或聚合来实现，在运行时刻是可以变化的，更具动态性。GoF 中除了以上 4 种，其他的都是对象模式。</li>
</ul>
<p>一般都选用第一种设计模式的分类方法，总结如下</p>
<p></p>
<h2 id="使用情景">使用情景</h2>
<blockquote>
<p>迭代器模式是一种行为设计模式， 提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象内部表示。</p>
</blockquote>
<p>C++中比较典型类似与std的vector的前向迭代器<code>begin()</code>和<code>end()</code>，以及后向迭代器<code>rbegin()</code>和<code>rend()</code>。</p>
<h2 id="问题引入">问题引入</h2>
<p>可以设想元素聚合成集合的方式，最简单的方式是顺序存储的数组或者列表，但是也有例如树、图和其他复杂的数据结构。所以，如果要遍历集合中的元素，有下面的两个问题需要解决：</p>
<ol>
<li>如何在不改变元素的前提下，遍历各种不同的集合？</li>
<li>同一个集合如果有不同的遍历方式（比如树有前中后序3种不同的遍历顺序），如果在不改变集合的前提下，比较容易扩展这些功能呢？</li>
</ol>
<p></p>
<h2 id="解决方案">解决方案</h2>
<p>为了满足开闭原则，我们将定义一个迭代器的类，将迭代从集合种抽象出来，作为一个行为的迭代器处理。如下图所示，对于一个树结构，我们定义了两个迭代器的类，DFS和BFS两个迭代器，这样可以将元素遍历和树本身进行解耦。</p>
<p></p>
<h2 id="uml表示">UML表示</h2>
<p>我们以《图解设计模式》中遍历书架中的书本为例，有如下的UML图</p>
<p></p>
<p>对上面的这幅图做进一步的说明，</p>
<ul>
<li>Aggregate表示集合的接口，书架实现该接口，所以书架必须要有迭代器的方法；</li>
<li>Iterator表示集合的迭代器的接口，书架的迭代器实现它；
需要说明的是，此处的迭代器只有一种前向的迭代器，也可以定义后向遍历的迭代器。</li>
</ul>
<h2 id="c代码">C++代码</h2>
<p>我们使用C++按照上面的UML图片实现这个设计模式。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp"></span><span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="k">enum</span> <span class="nc">State</span> <span class="p">{</span>
    <span class="n">RIGHT</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
    <span class="n">WRONG</span><span class="p">,</span>
    <span class="n">RESERVED</span> <span class="o">=</span> <span class="mi">22</span>
<span class="p">};</span>
<span class="c1">// 书本的类
</span><span class="c1"></span><span class="k">class</span> <span class="nc">Book</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">Book</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="p">)</span> <span class="o">:</span> <span class="n">name_</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="p">{};</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">getName</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">name_</span><span class="p">;</span> <span class="p">};</span>
    <span class="o">~</span><span class="n">Book</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
<span class="k">private</span><span class="o">:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name_</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// 抽象的迭代器类，包括获得下一本书，以及是否有下一本书的判断
</span><span class="c1"></span><span class="k">class</span> <span class="nc">Iterator</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">virtual</span> <span class="n">Book</span> <span class="n">Next</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">virtual</span> <span class="kt">bool</span> <span class="nf">HasNext</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">Iterator</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// 抽象的聚合类，该类有创建迭代器、取得某个位置的书本，弹出书本，计数，加入书本等功能
</span><span class="c1"></span><span class="k">class</span> <span class="nc">Aggregate</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">virtual</span> <span class="n">Iterator</span><span class="o">*</span> <span class="n">CreateIterator</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">virtual</span> <span class="n">State</span> <span class="nf">getBookAt</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">index</span><span class="p">,</span> <span class="n">Book</span><span class="o">&amp;</span> <span class="n">book</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="nf">Count</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">Aggregate</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// 书架的具体迭代器，实现上面的抽象类的虚函数
</span><span class="c1"></span><span class="k">class</span> <span class="nc">BookShelfIterator</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Iterator</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">BookShelfIterator</span><span class="p">(</span><span class="n">Aggregate</span><span class="o">*</span> <span class="n">aggregate</span><span class="p">)</span> <span class="o">:</span> <span class="n">aggregate_</span><span class="p">(</span><span class="n">aggregate</span><span class="p">),</span> <span class="n">loc_</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{};</span>
    <span class="o">~</span><span class="n">BookShelfIterator</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">aggregate_</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">delete</span> <span class="n">aggregate_</span><span class="p">;</span>
            <span class="n">aggregate_</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">loc_</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">Book</span> <span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Book</span> <span class="n">book</span><span class="p">;</span>
        <span class="n">aggregate_</span><span class="o">-&gt;</span><span class="n">getBookAt</span><span class="p">(</span><span class="n">loc_</span><span class="p">,</span> <span class="n">book</span><span class="p">);</span>
        <span class="n">loc_</span><span class="o">++</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">book</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">bool</span> <span class="nf">HasNext</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">loc_</span> <span class="o">&lt;</span> <span class="n">aggregate_</span><span class="o">-&gt;</span><span class="n">Count</span><span class="p">();</span>
    <span class="p">}</span>
<span class="k">private</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">loc_</span><span class="p">;</span>
    <span class="n">Aggregate</span><span class="o">*</span> <span class="n">aggregate_</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// 具体的聚合类——书架，实现上面的功能
</span><span class="c1"></span><span class="k">class</span> <span class="nc">BookShelf</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Aggregate</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">BookShelf</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">maxSize</span><span class="p">)</span> <span class="o">:</span><span class="n">maxSize_</span><span class="p">(</span><span class="n">maxSize</span><span class="p">),</span> <span class="n">count_</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">iterator_</span><span class="p">(</span><span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">books_</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="n">Iterator</span><span class="o">*</span> <span class="nf">CreateIterator</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">iterator_</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">iterator_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BookShelfIterator</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">iterator_</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">State</span> <span class="nf">getBookAt</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">index</span><span class="p">,</span> <span class="n">Book</span><span class="o">&amp;</span> <span class="n">book</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="o">&gt;=</span> <span class="n">count_</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Wrong index</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">WRONG</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">book</span> <span class="o">=</span> <span class="n">books_</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
        <span class="k">return</span> <span class="n">RIGHT</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="nf">Pop</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">books_</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
        <span class="n">count_</span><span class="o">--</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="nf">Count</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">count_</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="nf">Push</span><span class="p">(</span><span class="k">const</span> <span class="n">Book</span><span class="o">&amp;</span> <span class="n">book</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">count_</span> <span class="o">==</span> <span class="n">maxSize_</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;bookshelf is full</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">books_</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">book</span><span class="p">);</span>
        <span class="n">count_</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="o">~</span><span class="n">BookShelf</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">iterator_</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">delete</span> <span class="n">iterator_</span><span class="p">;</span>
            <span class="n">iterator_</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">maxSize_</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">count_</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">books_</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
    <span class="p">}</span>
<span class="k">private</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">maxSize_</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">count_</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="n">books_</span><span class="p">;</span>
    <span class="n">Iterator</span><span class="o">*</span> <span class="n">iterator_</span><span class="p">;</span>
<span class="p">};</span>

<span class="c1">// client
</span><span class="c1"></span><span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">BookShelf</span><span class="o">*</span> <span class="n">myShelf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BookShelf</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
	<span class="n">myShelf</span><span class="o">-&gt;</span><span class="n">Push</span><span class="p">(</span><span class="n">Book</span><span class="p">(</span><span class="s">&#34;《重构》&#34;</span><span class="p">));</span>
	<span class="n">myShelf</span><span class="o">-&gt;</span><span class="n">Push</span><span class="p">(</span><span class="n">Book</span><span class="p">(</span><span class="s">&#34;《图解设计模式》&#34;</span><span class="p">));</span>
	<span class="n">myShelf</span><span class="o">-&gt;</span><span class="n">Push</span><span class="p">(</span><span class="n">Book</span><span class="p">(</span><span class="s">&#34;《黎曼猜想》&#34;</span><span class="p">));</span>

	<span class="n">Iterator</span><span class="o">*</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">myShelf</span><span class="o">-&gt;</span><span class="n">CreateIterator</span><span class="p">();</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;书架上有&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">myShelf</span><span class="o">-&gt;</span><span class="n">Count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;本书：</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
	<span class="k">while</span> <span class="p">(</span><span class="n">iter</span><span class="o">-&gt;</span><span class="n">HasNext</span><span class="p">()</span> <span class="o">==</span>  <span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">().</span><span class="n">getName</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>具体的运行结果如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">书架上有3本书：
《重构》
《图解设计模式》
《黎曼猜想》
</code></pre></td></tr></table>
</div>
</div><h2 id="分析角色">分析角色</h2>
<p>这个模式有实际上由两个角色，<strong>集合以及集合的迭代器</strong>，这两个事物由分为抽象和具体两种。我们所举的例子中</p>
<ul>
<li><code>BookShelf</code>就是具体的集合，它实现自抽象的集合接口<code>Aggregate</code>；</li>
<li><code>BookShelfIterator</code>是具体的迭代器，它实现自抽象的迭代器接口<code>Iterator</code>。
迭代器接口中定义了迭代器的遍历的所有方法，<code>HasNext</code>以及<code>Next</code>。</li>
</ul>
<p>这里需要注意的是，在C++的版本里面集合的接口中不仅定义了创建迭代器的方法<code>CreateIterator</code>，而且定义了集合的个数<code>Count</code>和集合获取当前元素的方法<code>getBookAt</code>，这是因为迭代器中的方法实现依赖这些接口。</p>
<h2 id="扩展修改">扩展修改</h2>
<p>大家可以思考一下为什么我们需要这个模式呢？设计模式的初衷是实现代码的<strong>复用和可扩展</strong>，这个模式体现在哪里呢？</p>
<h3 id="遍历方法和集合本身解耦">遍历方法和集合本身解耦</h3>
<p>迭代器模式的重要作用是<strong>将集合的遍历和实现分离开来</strong>，换句话说，无论实现如何变化，我依然可以使用原来的方法进行遍历，也就是说<strong>遍历这个动作本身</strong>不会因为书架的实现发生变化而变化，所以下面的代码是不变的</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">while</span> <span class="p">(</span><span class="n">iter</span><span class="o">-&gt;</span><span class="n">HasNext</span><span class="p">()</span> <span class="o">==</span>  <span class="nb">true</span><span class="p">)</span> <span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">().</span><span class="n">getName</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>我们依然仅仅依靠<code>HasNext</code>以及<code>Next</code>接口就可以完成对于书架本身的遍历。</p>
<h3 id="遍历需求易于扩展">遍历需求易于扩展</h3>
<p>不妨设想一下，假如我们需要在原来的书架上新增一种遍历方式，从后向前实现后向遍历，这个代码该怎么修改呢？应该完成如下的工作：</p>
<ol>
<li>在原来的书架类中新增后向遍历的iter指针；</li>
<li>书架类中包含创建后向迭代器的方法；</li>
<li>后向迭代器继承自迭代器类别，实现后向迭代器</li>
</ol>
<p>然后就可以继续使用原来的遍历方式遍历集合了，具体的代码如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">  1
</span><span class="lnt">  2
</span><span class="lnt">  3
</span><span class="lnt">  4
</span><span class="lnt">  5
</span><span class="lnt">  6
</span><span class="lnt">  7
</span><span class="lnt">  8
</span><span class="lnt">  9
</span><span class="lnt"> 10
</span><span class="lnt"> 11
</span><span class="lnt"> 12
</span><span class="lnt"> 13
</span><span class="lnt"> 14
</span><span class="lnt"> 15
</span><span class="lnt"> 16
</span><span class="lnt"> 17
</span><span class="lnt"> 18
</span><span class="lnt"> 19
</span><span class="lnt"> 20
</span><span class="lnt"> 21
</span><span class="lnt"> 22
</span><span class="lnt"> 23
</span><span class="lnt"> 24
</span><span class="lnt"> 25
</span><span class="lnt"> 26
</span><span class="lnt"> 27
</span><span class="lnt"> 28
</span><span class="lnt"> 29
</span><span class="lnt"> 30
</span><span class="lnt"> 31
</span><span class="lnt"> 32
</span><span class="lnt"> 33
</span><span class="lnt"> 34
</span><span class="lnt"> 35
</span><span class="lnt"> 36
</span><span class="lnt"> 37
</span><span class="lnt"> 38
</span><span class="lnt"> 39
</span><span class="lnt"> 40
</span><span class="lnt"> 41
</span><span class="lnt"> 42
</span><span class="lnt"> 43
</span><span class="lnt"> 44
</span><span class="lnt"> 45
</span><span class="lnt"> 46
</span><span class="lnt"> 47
</span><span class="lnt"> 48
</span><span class="lnt"> 49
</span><span class="lnt"> 50
</span><span class="lnt"> 51
</span><span class="lnt"> 52
</span><span class="lnt"> 53
</span><span class="lnt"> 54
</span><span class="lnt"> 55
</span><span class="lnt"> 56
</span><span class="lnt"> 57
</span><span class="lnt"> 58
</span><span class="lnt"> 59
</span><span class="lnt"> 60
</span><span class="lnt"> 61
</span><span class="lnt"> 62
</span><span class="lnt"> 63
</span><span class="lnt"> 64
</span><span class="lnt"> 65
</span><span class="lnt"> 66
</span><span class="lnt"> 67
</span><span class="lnt"> 68
</span><span class="lnt"> 69
</span><span class="lnt"> 70
</span><span class="lnt"> 71
</span><span class="lnt"> 72
</span><span class="lnt"> 73
</span><span class="lnt"> 74
</span><span class="lnt"> 75
</span><span class="lnt"> 76
</span><span class="lnt"> 77
</span><span class="lnt"> 78
</span><span class="lnt"> 79
</span><span class="lnt"> 80
</span><span class="lnt"> 81
</span><span class="lnt"> 82
</span><span class="lnt"> 83
</span><span class="lnt"> 84
</span><span class="lnt"> 85
</span><span class="lnt"> 86
</span><span class="lnt"> 87
</span><span class="lnt"> 88
</span><span class="lnt"> 89
</span><span class="lnt"> 90
</span><span class="lnt"> 91
</span><span class="lnt"> 92
</span><span class="lnt"> 93
</span><span class="lnt"> 94
</span><span class="lnt"> 95
</span><span class="lnt"> 96
</span><span class="lnt"> 97
</span><span class="lnt"> 98
</span><span class="lnt"> 99
</span><span class="lnt">100
</span><span class="lnt">101
</span><span class="lnt">102
</span><span class="lnt">103
</span><span class="lnt">104
</span><span class="lnt">105
</span><span class="lnt">106
</span><span class="lnt">107
</span><span class="lnt">108
</span><span class="lnt">109
</span><span class="lnt">110
</span><span class="lnt">111
</span><span class="lnt">112
</span><span class="lnt">113
</span><span class="lnt">114
</span><span class="lnt">115
</span><span class="lnt">116
</span><span class="lnt">117
</span><span class="lnt">118
</span><span class="lnt">119
</span><span class="lnt">120
</span><span class="lnt">121
</span><span class="lnt">122
</span><span class="lnt">123
</span><span class="lnt">124
</span><span class="lnt">125
</span><span class="lnt">126
</span><span class="lnt">127
</span><span class="lnt">128
</span><span class="lnt">129
</span><span class="lnt">130
</span><span class="lnt">131
</span><span class="lnt">132
</span><span class="lnt">133
</span><span class="lnt">134
</span><span class="lnt">135
</span><span class="lnt">136
</span><span class="lnt">137
</span><span class="lnt">138
</span><span class="lnt">139
</span><span class="lnt">140
</span><span class="lnt">141
</span><span class="lnt">142
</span><span class="lnt">143
</span><span class="lnt">144
</span><span class="lnt">145
</span><span class="lnt">146
</span><span class="lnt">147
</span><span class="lnt">148
</span><span class="lnt">149
</span><span class="lnt">150
</span><span class="lnt">151
</span><span class="lnt">152
</span><span class="lnt">153
</span><span class="lnt">154
</span><span class="lnt">155
</span><span class="lnt">156
</span><span class="lnt">157
</span><span class="lnt">158
</span><span class="lnt">159
</span><span class="lnt">160
</span><span class="lnt">161
</span><span class="lnt">162
</span><span class="lnt">163
</span><span class="lnt">164
</span><span class="lnt">165
</span><span class="lnt">166
</span><span class="lnt">167
</span><span class="lnt">168
</span><span class="lnt">169
</span><span class="lnt">170
</span><span class="lnt">171
</span><span class="lnt">172
</span><span class="lnt">173
</span><span class="lnt">174
</span><span class="lnt">175
</span><span class="lnt">176
</span><span class="lnt">177
</span><span class="lnt">178
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp">
<span class="k">enum</span> <span class="nc">State</span> <span class="p">{</span>
    <span class="n">RIGHT</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>
    <span class="n">WRONG</span><span class="p">,</span>
    <span class="n">RESERVED</span> <span class="o">=</span> <span class="mi">22</span>
<span class="p">};</span>
<span class="c1">// concrete book
</span><span class="c1"></span><span class="k">class</span> <span class="nc">Book</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">Book</span><span class="p">(</span><span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name</span> <span class="o">=</span> <span class="s">&#34;&#34;</span><span class="p">)</span> <span class="o">:</span> <span class="n">name_</span><span class="p">(</span><span class="n">name</span><span class="p">)</span> <span class="p">{};</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">getName</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span> <span class="k">return</span> <span class="n">name_</span><span class="p">;</span> <span class="p">};</span>
    <span class="o">~</span><span class="n">Book</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
<span class="k">private</span><span class="o">:</span>
    <span class="n">std</span><span class="o">::</span><span class="n">string</span> <span class="n">name_</span><span class="p">;</span>
<span class="p">};</span>


<span class="k">class</span> <span class="nc">Iterator</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">virtual</span> <span class="n">Book</span> <span class="n">Next</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">virtual</span> <span class="kt">bool</span> <span class="nf">HasNext</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">Iterator</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
<span class="p">};</span>


<span class="k">class</span> <span class="nc">Aggregate</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="k">virtual</span> <span class="n">Iterator</span><span class="o">*</span> <span class="n">CreateForwardIterator</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">virtual</span> <span class="n">Iterator</span><span class="o">*</span> <span class="nf">CreateBackwardIterator</span><span class="p">()</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">virtual</span> <span class="n">State</span> <span class="nf">getBookAt</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">index</span><span class="p">,</span> <span class="n">Book</span><span class="o">&amp;</span> <span class="n">book</span><span class="p">)</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">virtual</span> <span class="kt">int</span> <span class="nf">Count</span><span class="p">()</span> <span class="k">const</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">virtual</span> <span class="o">~</span><span class="n">Aggregate</span><span class="p">()</span> <span class="o">=</span> <span class="k">default</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">BookShelfBackwardIterator</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Iterator</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">BookShelfBackwardIterator</span><span class="p">(</span><span class="n">Aggregate</span><span class="o">*</span> <span class="n">aggregate</span><span class="p">)</span> <span class="o">:</span> <span class="n">aggregate_</span><span class="p">(</span><span class="n">aggregate</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">loc_</span> <span class="o">=</span> <span class="n">aggregate_</span><span class="o">-&gt;</span><span class="n">Count</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">};</span>
    <span class="o">~</span><span class="n">BookShelfBackwardIterator</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">aggregate_</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">aggregate_</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">loc_</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">Book</span> <span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Book</span> <span class="n">book</span><span class="p">;</span>
        <span class="n">aggregate_</span><span class="o">-&gt;</span><span class="n">getBookAt</span><span class="p">(</span><span class="n">loc_</span><span class="p">,</span> <span class="n">book</span><span class="p">);</span>
        <span class="n">loc_</span><span class="o">--</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">book</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">bool</span> <span class="nf">HasNext</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">loc_</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="p">}</span>
<span class="k">private</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">loc_</span><span class="p">;</span>
    <span class="n">Aggregate</span><span class="o">*</span> <span class="n">aggregate_</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">BookShelfForwardIterator</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Iterator</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">BookShelfForwardIterator</span><span class="p">(</span><span class="n">Aggregate</span><span class="o">*</span> <span class="n">aggregate</span><span class="p">)</span> <span class="o">:</span> <span class="n">aggregate_</span><span class="p">(</span><span class="n">aggregate</span><span class="p">),</span> <span class="n">loc_</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span> <span class="p">{};</span>
    <span class="o">~</span><span class="n">BookShelfForwardIterator</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">aggregate_</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">aggregate_</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">loc_</span> <span class="o">=</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">Book</span> <span class="nf">Next</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Book</span> <span class="n">book</span><span class="p">;</span>
        <span class="n">aggregate_</span><span class="o">-&gt;</span><span class="n">getBookAt</span><span class="p">(</span><span class="n">loc_</span><span class="p">,</span> <span class="n">book</span><span class="p">);</span>
        <span class="n">loc_</span><span class="o">++</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">book</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">bool</span> <span class="nf">HasNext</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">loc_</span> <span class="o">&lt;</span> <span class="n">aggregate_</span><span class="o">-&gt;</span><span class="n">Count</span><span class="p">();</span>
    <span class="p">}</span>
<span class="k">private</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">loc_</span><span class="p">;</span>
    <span class="n">Aggregate</span><span class="o">*</span> <span class="n">aggregate_</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">class</span> <span class="nc">BookShelf</span> <span class="o">:</span> <span class="k">public</span> <span class="n">Aggregate</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="n">BookShelf</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">maxSize</span><span class="p">)</span> <span class="o">:</span><span class="n">maxSize_</span><span class="p">(</span><span class="n">maxSize</span><span class="p">),</span> <span class="n">count_</span><span class="p">(</span><span class="mi">0</span><span class="p">),</span> <span class="n">iterator_</span><span class="p">(</span><span class="k">nullptr</span><span class="p">),</span> <span class="n">backiter_</span><span class="p">(</span><span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">books_</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="n">Iterator</span><span class="o">*</span> <span class="nf">CreateBackwardIterator</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">backiter_</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">backiter_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BookShelfBackwardIterator</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">backiter_</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">Iterator</span><span class="o">*</span> <span class="nf">CreateForwardIterator</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">iterator_</span> <span class="o">==</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">iterator_</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BookShelfForwardIterator</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">iterator_</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">State</span> <span class="nf">getBookAt</span><span class="p">(</span><span class="k">const</span> <span class="kt">int</span> <span class="n">index</span><span class="p">,</span> <span class="n">Book</span><span class="o">&amp;</span> <span class="n">book</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">index</span> <span class="o">&gt;=</span> <span class="n">count_</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;Wrong index</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
            <span class="k">return</span> <span class="n">WRONG</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">book</span> <span class="o">=</span> <span class="n">books_</span><span class="p">[</span><span class="n">index</span><span class="p">];</span>
        <span class="k">return</span> <span class="n">RIGHT</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="nf">Pop</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">books_</span><span class="p">.</span><span class="n">pop_back</span><span class="p">();</span>
        <span class="n">count_</span><span class="o">--</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">int</span> <span class="nf">Count</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">count_</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="kt">void</span> <span class="nf">Push</span><span class="p">(</span><span class="k">const</span> <span class="n">Book</span><span class="o">&amp;</span> <span class="n">book</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">count_</span> <span class="o">==</span> <span class="n">maxSize_</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">std</span><span class="o">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;bookshelf is full</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="n">books_</span><span class="p">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">book</span><span class="p">);</span>
        <span class="n">count_</span><span class="o">++</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="o">~</span><span class="n">BookShelf</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">iterator_</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">delete</span> <span class="n">iterator_</span><span class="p">;</span>
            <span class="n">iterator_</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">backiter_</span> <span class="o">!=</span> <span class="k">nullptr</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">delete</span> <span class="n">backiter_</span><span class="p">;</span>
            <span class="n">backiter_</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">maxSize_</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">count_</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="n">books_</span><span class="p">.</span><span class="n">clear</span><span class="p">();</span>
    <span class="p">}</span>
<span class="k">private</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">maxSize_</span><span class="p">;</span>
    <span class="kt">int</span> <span class="n">count_</span><span class="p">;</span>
    <span class="n">std</span><span class="o">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Book</span><span class="o">&gt;</span> <span class="n">books_</span><span class="p">;</span>
    <span class="n">Iterator</span><span class="o">*</span> <span class="n">iterator_</span><span class="p">;</span>
    <span class="n">Iterator</span><span class="o">*</span> <span class="n">backiter_</span><span class="p">;</span>
<span class="p">};</span>

<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>
<span class="c1">// book class
</span><span class="c1"></span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
	<span class="n">BookShelf</span><span class="o">*</span> <span class="n">myShelf</span> <span class="o">=</span> <span class="k">new</span> <span class="n">BookShelf</span><span class="p">(</span><span class="mi">5</span><span class="p">);</span>
	<span class="n">myShelf</span><span class="o">-&gt;</span><span class="n">Push</span><span class="p">(</span><span class="n">Book</span><span class="p">(</span><span class="s">&#34;《重构》&#34;</span><span class="p">));</span>
	<span class="n">myShelf</span><span class="o">-&gt;</span><span class="n">Push</span><span class="p">(</span><span class="n">Book</span><span class="p">(</span><span class="s">&#34;《图解设计模式》&#34;</span><span class="p">));</span>
	<span class="n">myShelf</span><span class="o">-&gt;</span><span class="n">Push</span><span class="p">(</span><span class="n">Book</span><span class="p">(</span><span class="s">&#34;《黎曼猜想》&#34;</span><span class="p">));</span>

	<span class="n">Iterator</span><span class="o">*</span> <span class="n">iter</span> <span class="o">=</span> <span class="n">myShelf</span><span class="o">-&gt;</span><span class="n">CreateForwardIterator</span><span class="p">();</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;前向遍历&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">myShelf</span><span class="o">-&gt;</span><span class="n">Count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;本书：</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
	<span class="k">while</span> <span class="p">(</span><span class="n">iter</span><span class="o">-&gt;</span><span class="n">HasNext</span><span class="p">())</span> <span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">().</span><span class="n">getName</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>
	<span class="n">iter</span> <span class="o">=</span> <span class="k">nullptr</span><span class="p">;</span>

	<span class="n">iter</span> <span class="o">=</span> <span class="n">myShelf</span><span class="o">-&gt;</span><span class="n">CreateBackwardIterator</span><span class="p">();</span>
	<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;后向遍历&#34;</span> <span class="o">&lt;&lt;</span> <span class="n">myShelf</span><span class="o">-&gt;</span><span class="n">Count</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="s">&#34;本书：</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">;</span>
	<span class="k">while</span> <span class="p">(</span><span class="n">iter</span><span class="o">-&gt;</span><span class="n">HasNext</span><span class="p">())</span> <span class="p">{</span>
		<span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">iter</span><span class="o">-&gt;</span><span class="n">Next</span><span class="p">().</span><span class="n">getName</span><span class="p">()</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
	<span class="p">}</span>

	<span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>运行效果如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">前向遍历3本书：
《重构》
《图解设计模式》
《黎曼猜想》
后向遍历3本书：
《黎曼猜想》
《图解设计模式》
《重构》
</code></pre></td></tr></table>
</div>
</div><h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="https://design-patterns.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener noreffer">图说设计模式 — Graphic Design Patterns</a></li>
<li><a href="https://edu.heibai.org/%E5%9B%BE%E8%A7%A3%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.pdf" target="_blank" rel="noopener noreffer">图灵程序设计丛书 图解设计模式</a>，图解设计模式的pdf下载地址</li>
<li><a href="https://refactoringguru.cn/design-patterns/catalog" target="_blank" rel="noopener noreffer">设计模式目录：22种设计模式</a>，乌克兰的某个程序员写的设计模式的网页，非常不错</li>
</ol>
<hr>
<figure>
     <figcaption>
            <h4>欢迎扫码关注我的公众号</h4>
        </figcaption>
</figure>]]></description>
</item><item>
    <title>[转载]表驱动法代码实践</title>
    <link>https://bugxch.github.io/c_driven_table/</link>
    <pubDate>Fri, 22 Jan 2021 08:07:14 &#43;0800</pubDate>
    <author>bugxch</author>
    <guid>https://bugxch.github.io/c_driven_table/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://pic.imgdb.cn/item/600a17e53ffa7d37b3da9d49.jpg" referrerpolicy="no-referrer">
            </div><p>这是一篇转载，点击查看<a href="https://www.cnblogs.com/clover-toeic/p/3730362.html" target="_blank" rel="noopener noreffer">原文链接</a>。</p>
<div class="details admonition quote open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-quote-right fa-fw"></i>引用<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">数据压倒一切。如果选择了正确的数据结构并把一切组织的井井有条，正确的算法就不言自明。编程的核心是数据结构，而不是算法. &ndash; Rob Pike</div>
        </div>
    </div>
<div class="details admonition tip">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-lightbulb fa-fw"></i>说明<i class="details-icon fas fa-angle-right fa-fw"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">本文基于这样的认识：数据是易变的，逻辑是稳定的。本文例举的编程实现多为代码片段，但不影响描述的完整性。本文例举的编程虽然基于C语言，但其编程思想也适用于其他语言。此外，本文不涉及语言相关的运行效率讨论。</div>
        </div>
    </div>
<h2 id="概念提出">概念提出</h2>
<p>所谓表驱动法(Table-Driven Approach)简而言之就是用查表的方法获取数据。此处的“表”通常为数组，但可视为数据库的一种体现。根据字典中的部首检字表查找读音未知的汉字就是典型的表驱动法，即以每个字的字形为依据，计算出一个索引值，并映射到对应的页数。相比一页一页地顺序翻字典查字，部首检字法效率极高。</p>
<p>具体到编程方面，在数据不多时可用逻辑判断语句(if…else或switch…case)来获取值；但随着数据的增多，逻辑语句会越来越长，此时表驱动法的优势就开始显现。例如，用36进制(A表示10，B表示11，…)表示更大的数字，逻辑判断语句如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">if</span><span class="p">(</span><span class="n">ucNum</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ucNumChar</span> <span class="o">=</span> <span class="n">ConvertToChar</span><span class="p">(</span><span class="n">ucNum</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">ucNum</span> <span class="o">==</span> <span class="mi">10</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ucNumChar</span> <span class="o">=</span> <span class="sc">&#39;A&#39;</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">ucNum</span> <span class="o">==</span> <span class="mi">11</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ucNumChar</span> <span class="o">=</span> <span class="sc">&#39;B&#39;</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">ucNum</span> <span class="o">==</span> <span class="mi">12</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ucNumChar</span> <span class="o">=</span> <span class="sc">&#39;C&#39;</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//... ...
</span><span class="c1"></span><span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="n">ucNum</span> <span class="o">==</span> <span class="mi">35</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">ucNumChar</span> <span class="o">=</span> <span class="sc">&#39;Z&#39;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>当然也可以用switch…case结构，但实现都很冗长。而用表驱动法(将numChar存入数组)则非常直观和简洁。如：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">CHAR</span> <span class="n">aNumChars</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="sc">&#39;0&#39;</span><span class="p">,</span> <span class="sc">&#39;1&#39;</span><span class="p">,</span> <span class="sc">&#39;2&#39;</span><span class="p">,</span> <span class="cm">/*3~9*/</span><span class="sc">&#39;A&#39;</span><span class="p">,</span> <span class="sc">&#39;B&#39;</span><span class="p">,</span> <span class="sc">&#39;C&#39;</span><span class="p">,</span> <span class="cm">/*D~Y*/</span><span class="sc">&#39;Z&#39;</span><span class="p">};</span>
<span class="n">CHAR</span> <span class="n">ucNumChar</span> <span class="o">=</span> <span class="n">aNumChars</span><span class="p">[</span><span class="n">ucNum</span> <span class="o">%</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">aNumChars</span><span class="p">)];</span>
</code></pre></td></tr></table>
</div>
</div><p>像这样直接将变量当作下数组下标来读取数值的方法就是直接查表法。注意，如果熟悉字符串操作，则上述写法可以更简洁：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">CHAR</span> <span class="n">ucNumChar</span> <span class="o">=</span> <span class="s">&#34;0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&#34;</span><span class="p">[</span><span class="n">ucNum</span><span class="p">];</span>
</code></pre></td></tr></table>
</div>
</div><p>使用表驱动法时需要关注两个问题：一是如何查表，从表中读取正确的数据；二是表里存放什么，如数值或函数指针。前者参见1.1节“查表方式”内容，后者参见1.2节“实战示例”内容。</p>
<h3 id="查表方式">查表方式</h3>
<p>常用的查表方式有直接查找、索引查找和分段查找等。</p>
<h4 id="直接查找">直接查找</h4>
<p>即直接通过数组下标获取到数据。如果熟悉哈希表的话，可以很容易看出这种查表方式就是哈希表的直接访问法。如获取星期名称，逻辑判断语句如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">if</span><span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">ucDay</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">pszDayName</span> <span class="o">=</span> <span class="s">&#34;Sunday&#34;</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="mi">1</span> <span class="o">==</span> <span class="n">ucDay</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">pszDayName</span> <span class="o">=</span> <span class="s">&#34;Monday&#34;</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//... ...
</span><span class="c1"></span><span class="k">else</span> <span class="nf">if</span><span class="p">(</span><span class="mi">6</span> <span class="o">==</span> <span class="n">ucDay</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">pszDayName</span> <span class="o">=</span> <span class="s">&#34;Saturday&#34;</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>而实现同样的功能，可将这些数据存储到一个表里：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">CHAR</span> <span class="o">*</span><span class="n">paNumChars</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#34;Sunday&#34;</span><span class="p">,</span> <span class="s">&#34;Monday&#34;</span><span class="p">,</span> <span class="s">&#34;Tuesday&#34;</span><span class="p">,</span> <span class="s">&#34;Wednesday&#34;</span><span class="p">,</span> <span class="s">&#34;Thursday&#34;</span><span class="p">,</span> <span class="s">&#34;Friday&#34;</span><span class="p">,</span>  <span class="s">&#34;Saturday&#34;</span><span class="p">};</span>
<span class="n">CHAR</span> <span class="o">*</span><span class="n">pszDayName</span> <span class="o">=</span> <span class="n">paNumChars</span><span class="p">[</span><span class="n">ucDay</span><span class="p">];</span>
</code></pre></td></tr></table>
</div>
</div><p>类似哈希表特性，表驱动法适用于无需有序遍历数据，且数据量大小可提前预测的情况。对于过于复杂和庞大的判断，可将数据存为文件，需要时加载文件初始化数组，从而在不修改程序的情况下调整里面的数值。</p>
<p>有时，访问之前需要先进行一次键值转换。如表驱动法表示端口忙闲时，需将槽位端口号映射为全局编号。所生成的端口数目大小的数组，其下标对应全局端口编号，元素值表示相应端口的忙闲状态。</p>
<h4 id="索引查找">索引查找</h4>
<p>有时通过一次键值转换，依然无法把数据(如英文单词等)转为键值。此时可将转换的对应关系写到一个索引表里，即索引访问。</p>
<p>如现有100件商品，4位编号，范围从0000到9999。此时只需要申请一个长度为100的数组，且对应2位键值。但将4位的编号转换为2位的键值，可能过于复杂或没有规律，最合适的方法是建立一个保存该转换关系的索引表。采用索引访问既节省内存，又方便维护。比如索引A表示通过名称访问，索引B表示通过编号访问。</p>
<h4 id="分段查找">分段查找</h4>
<p>通过确定数据所处的范围确定分类(下标)。有的数据可分成若干区间，即具有阶梯性，如分数等级。此时可将每个区间的上限(或下限)存到一个表中，将对应的值存到另一表中，通过第一个表确定所处的区段，再由区段下标在第二个表里读取相应数值。注意要留意端点，可用二分法查找，另外可考虑通过索引方法来代替。如根据分数查绩效等级：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#define MAX_GRADE_LEVEL   (INT8U)5
</span><span class="cp"></span><span class="n">DOUBLE</span> <span class="n">aRangeLimit</span><span class="p">[</span><span class="n">MAX_GRADE_LEVEL</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mf">50.0</span><span class="p">,</span> <span class="mf">60.0</span><span class="p">,</span> <span class="mf">70.0</span><span class="p">,</span> <span class="mf">80.0</span><span class="p">,</span> <span class="mf">100.0</span><span class="p">};</span>
<span class="n">CHAR</span> <span class="o">*</span><span class="n">paGrades</span><span class="p">[</span><span class="n">MAX_GRADE_LEVEL</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#34;Fail&#34;</span><span class="p">,</span> <span class="s">&#34;Pass&#34;</span><span class="p">,</span> <span class="s">&#34;Credit&#34;</span><span class="p">,</span> <span class="s">&#34;Distinction&#34;</span><span class="p">,</span> <span class="s">&#34;High Distinction&#34;</span><span class="p">};</span>

<span class="k">static</span> <span class="n">CHAR</span><span class="o">*</span> <span class="nf">EvaluateGrade</span><span class="p">(</span><span class="n">DOUBLE</span> <span class="n">dScore</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">INT8U</span> <span class="n">ucLevel</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(;</span> <span class="n">ucLevel</span> <span class="o">&lt;</span> <span class="n">MAX_GRADE_LEVEL</span><span class="p">;</span> <span class="n">ucLevel</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">dScore</span> <span class="o">&lt;</span> <span class="n">aRangeLimit</span><span class="p">[</span><span class="n">ucLevel</span><span class="p">])</span>
            <span class="k">return</span> <span class="n">paGrades</span><span class="p">[</span><span class="n">ucLevel</span><span class="p">];</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">paGrades</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>上述两张表(数组)也可合并为一张表(结构体数组)，如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">typedef</span> <span class="k">struct</span><span class="p">{</span>
    <span class="n">DOUBLE</span>  <span class="n">aRangeLimit</span><span class="p">;</span>
    <span class="n">CHAR</span>    <span class="o">*</span><span class="n">pszGrade</span><span class="p">;</span>
<span class="p">}</span><span class="n">T_GRADE_MAP</span><span class="p">;</span>

<span class="n">T_GRADE_MAP</span> <span class="n">gGradeMap</span><span class="p">[</span><span class="n">MAX_GRADE_LEVEL</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span><span class="mf">50.0</span><span class="p">,</span>              <span class="s">&#34;Fail&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="mf">60.0</span><span class="p">,</span>              <span class="s">&#34;Pass&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="mf">70.0</span><span class="p">,</span>              <span class="s">&#34;Credit&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="mf">80.0</span><span class="p">,</span>              <span class="s">&#34;Distinction&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="mf">100.0</span><span class="p">,</span>             <span class="s">&#34;High Distinction&#34;</span><span class="p">}</span>
<span class="p">};</span>

<span class="k">static</span> <span class="n">CHAR</span><span class="o">*</span> <span class="nf">EvaluateGrade</span><span class="p">(</span><span class="n">DOUBLE</span> <span class="n">dScore</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">INT8U</span> <span class="n">ucLevel</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(;</span> <span class="n">ucLevel</span> <span class="o">&lt;</span> <span class="n">MAX_GRADE_LEVEL</span><span class="p">;</span> <span class="n">ucLevel</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">dScore</span> <span class="o">&lt;</span> <span class="n">gGradeMap</span><span class="p">[</span><span class="n">ucLevel</span><span class="p">].</span><span class="n">aRangeLimit</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">gGradeMap</span><span class="p">[</span><span class="n">ucLevel</span><span class="p">].</span><span class="n">pszGrade</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">gGradeMap</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="n">pszGrade</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>该表结构已具备的数据库的雏形，并可扩展支持更为复杂的数据。其查表方式通常为索引查找，偶尔也为分段查找；当索引具有规律性(如连续整数)时，退化为直接查找。</p>
<p>使用分段查找法时应注意边界，将每一分段范围的上界值都考虑在内。找出所有不在最高一级范围内的值，然后把剩下的值全部归入最高一级中。有时需要人为地为最高一级范围添加一个上界。同时应小心不要错误地用“&lt;”来代替“&lt;=”。要保证循环在找出属于最高一级范围内的值后恰当地结束，同时也要保证恰当处理范围边界。</p>
<h3 id="实战示例">实战示例</h3>
<p>本节多数示例取自实际项目。表形式为一维数组、二维数组和结构体数组；表内容有数据、字符串和函数指针。基于表驱动的思想，表形式和表内容可衍生出丰富的组合。</p>
<h4 id="字符统计">字符统计</h4>
<p>问题：统计用户输入的一串数字中每个数字出现的次数。普通解法主体代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">INT32U</span> <span class="n">aDigitCharNum</span><span class="p">[</span><span class="mi">10</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span> <span class="cm">/* 输入字符串中各数字字符出现的次数 */</span>
<span class="n">INT32U</span> <span class="n">dwStrLen</span> <span class="o">=</span> <span class="n">strlen</span><span class="p">(</span><span class="n">szDigits</span><span class="p">);</span>

<span class="n">INT32U</span> <span class="n">dwStrIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for</span><span class="p">(;</span> <span class="n">dwStrIdx</span> <span class="o">&lt;</span> <span class="n">dwStrLen</span><span class="p">;</span> <span class="n">dwStrIdx</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">switch</span><span class="p">(</span><span class="n">szDigits</span><span class="p">[</span><span class="n">dwStrIdx</span><span class="p">])</span>
    <span class="p">{</span>
        <span class="k">case</span> <span class="sc">&#39;1&#39;</span><span class="o">:</span>
            <span class="n">aDigitCharNum</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="k">case</span> <span class="sc">&#39;2&#39;</span><span class="o">:</span>
            <span class="n">aDigitCharNum</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
        <span class="c1">//... ...
</span><span class="c1"></span>        <span class="k">case</span> <span class="sc">&#39;9&#39;</span><span class="o">:</span>
            <span class="n">aDigitCharNum</span><span class="p">[</span><span class="mi">8</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
            <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这种解法的缺点显而易见，既不美观也不灵活。其问题关键在于未将数字字符与数组aDigitCharNum下标直接关联起来。以下示出更简洁的实现方式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">for</span><span class="p">(;</span> <span class="n">dwStrIdx</span> <span class="o">&lt;</span> <span class="n">dwStrLen</span><span class="p">;</span> <span class="n">dwStrIdx</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">aDigitCharNum</span><span class="p">[</span><span class="n">szDigits</span><span class="p">[</span><span class="n">dwStrIdx</span><span class="p">]</span> <span class="o">-</span> <span class="sc">&#39;0&#39;</span><span class="p">]</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>上述实现考虑到0也为数字字符。该解法也可扩展至统计所有ASCII可见字符。</p>
<h4 id="月天校验">月天校验</h4>
<p>问题：对给定年份和月份的天数进行校验(需区分平年和闰年)。普通解法主体代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">switch</span><span class="p">(</span><span class="n">OnuTime</span><span class="p">.</span><span class="n">Month</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>
    <span class="k">case</span> <span class="mi">3</span><span class="o">:</span>
    <span class="k">case</span> <span class="mi">5</span><span class="o">:</span>
    <span class="k">case</span> <span class="mi">7</span><span class="o">:</span>
    <span class="k">case</span> <span class="mi">8</span><span class="o">:</span>
    <span class="k">case</span> <span class="mi">10</span><span class="o">:</span>
    <span class="k">case</span> <span class="mi">12</span><span class="o">:</span>
        <span class="k">if</span><span class="p">(</span><span class="n">OnuTime</span><span class="p">.</span><span class="n">Day</span><span class="o">&gt;</span><span class="mi">31</span> <span class="o">||</span> <span class="n">OnuTime</span><span class="p">.</span><span class="n">Day</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">CtcOamLog</span><span class="p">(</span><span class="n">FUNCTION_Pon</span><span class="p">,</span><span class="s">&#34;Don&#39;t support this Day: %d(1~31)!!!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">OnuTime</span><span class="p">.</span><span class="n">Day</span><span class="p">);</span>
            <span class="n">retcode</span> <span class="o">=</span> <span class="n">S_ERROR</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">2</span><span class="o">:</span>
        <span class="k">if</span><span class="p">(((</span><span class="n">OnuTime</span><span class="p">.</span><span class="n">Year</span><span class="o">%</span><span class="mi">4</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">OnuTime</span><span class="p">.</span><span class="n">Year</span><span class="o">%</span><span class="mi">100</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">))</span> <span class="o">||</span> <span class="p">(</span><span class="n">OnuTime</span><span class="p">.</span><span class="n">Year</span><span class="o">%</span><span class="mi">400</span> <span class="o">==</span> <span class="mi">0</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">OnuTime</span><span class="p">.</span><span class="n">Day</span><span class="o">&gt;</span><span class="mi">29</span> <span class="o">||</span> <span class="n">OnuTime</span><span class="p">.</span><span class="n">Day</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">CtcOamLog</span><span class="p">(</span><span class="n">FUNCTION_Pon</span><span class="p">,</span><span class="s">&#34;Don&#39;t support this Day: %d(1~29)!!!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">OnuTime</span><span class="p">.</span><span class="n">Day</span><span class="p">);</span>
                <span class="n">retcode</span> <span class="o">=</span> <span class="n">S_ERROR</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">else</span>
        <span class="p">{</span>
            <span class="k">if</span><span class="p">(</span><span class="n">OnuTime</span><span class="p">.</span><span class="n">Day</span><span class="o">&gt;</span><span class="mi">28</span> <span class="o">||</span> <span class="n">OnuTime</span><span class="p">.</span><span class="n">Day</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="n">CtcOamLog</span><span class="p">(</span><span class="n">FUNCTION_Pon</span><span class="p">,</span><span class="s">&#34;Don&#39;t support this Day: %d(1~28)!!!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">OnuTime</span><span class="p">.</span><span class="n">Day</span><span class="p">);</span>
                <span class="n">retcode</span> <span class="o">=</span> <span class="n">S_ERROR</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">case</span> <span class="mi">4</span><span class="o">:</span>
    <span class="k">case</span> <span class="mi">6</span><span class="o">:</span>
    <span class="k">case</span> <span class="mi">9</span><span class="o">:</span>
    <span class="k">case</span> <span class="mi">11</span><span class="o">:</span>
        <span class="k">if</span><span class="p">(</span><span class="n">OnuTime</span><span class="p">.</span><span class="n">Day</span><span class="o">&gt;</span><span class="mi">30</span> <span class="o">||</span> <span class="n">OnuTime</span><span class="p">.</span><span class="n">Day</span><span class="o">&lt;</span><span class="mi">1</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">CtcOamLog</span><span class="p">(</span><span class="n">FUNCTION_Pon</span><span class="p">,</span><span class="s">&#34;Don&#39;t support this Day: %d(1~30)!!!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">OnuTime</span><span class="p">.</span><span class="n">Day</span><span class="p">);</span>
            <span class="n">retcode</span> <span class="o">=</span> <span class="n">S_ERROR</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">break</span><span class="p">;</span>
    <span class="k">default</span><span class="o">:</span>
        <span class="n">CtcOamLog</span><span class="p">(</span><span class="n">FUNCTION_Pon</span><span class="p">,</span><span class="s">&#34;Don&#39;t support this Month: %d(1~12)!!!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">OnuTime</span><span class="p">.</span><span class="n">Month</span><span class="p">);</span>
        <span class="n">retcode</span> <span class="o">=</span> <span class="n">S_ERROR</span><span class="p">;</span>
        <span class="k">break</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>以下示出更简洁的实现方式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#define MONTH_OF_YEAR 12    </span><span class="cm">/* 一年中的月份数 */</span><span class="cp">
</span><span class="cp"></span>
<span class="cm">/* 闰年：能被4整除且不能被100整除，或能被400整除 */</span>
<span class="cp">#define IS_LEAP_YEAR(year) ((((year) % 4 == 0) &amp;&amp; ((year) % 100 != 0)) || ((year) % 400 == 0))
</span><span class="cp"></span>
<span class="cm">/* 平年中的各月天数，下标对应月份 */</span>
<span class="n">INT8U</span> <span class="n">aDayOfCommonMonth</span><span class="p">[</span><span class="n">MONTH_OF_YEAR</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">31</span><span class="p">,</span> <span class="mi">28</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">,</span> <span class="mi">30</span><span class="p">,</span> <span class="mi">31</span><span class="p">};</span>

<span class="n">INT8U</span> <span class="n">ucMaxDay</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">if</span><span class="p">((</span><span class="n">OnuTime</span><span class="p">.</span><span class="n">Month</span> <span class="o">==</span> <span class="mi">2</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="p">(</span><span class="n">IS_LEAP_YEAR</span><span class="p">(</span><span class="n">OnuTime</span><span class="p">.</span><span class="n">Year</span><span class="p">)))</span>
    <span class="n">ucMaxDay</span> <span class="o">=</span> <span class="n">aDayOfCommonMonth</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="k">else</span>
    <span class="n">ucMaxDay</span> <span class="o">=</span> <span class="n">aDayOfCommonMonth</span><span class="p">[</span><span class="n">OnuTime</span><span class="p">.</span><span class="n">Month</span><span class="o">-</span><span class="mi">1</span><span class="p">];</span>

<span class="k">if</span><span class="p">((</span><span class="n">OnuTime</span><span class="p">.</span><span class="n">Day</span> <span class="o">&lt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="n">OnuTime</span><span class="p">.</span><span class="n">Day</span> <span class="o">&gt;</span> <span class="n">ucMaxDay</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">CtcOamLog</span><span class="p">(</span><span class="n">FUNCTION_Pon</span><span class="p">,</span><span class="s">&#34;Month %d doesn&#39;t have this Day: %d(1~%d)!!!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>
              <span class="n">OnuTime</span><span class="p">.</span><span class="n">Month</span><span class="p">,</span> <span class="n">OnuTime</span><span class="p">.</span><span class="n">Day</span><span class="p">,</span> <span class="n">ucMaxDay</span><span class="p">);</span>
    <span class="n">retcode</span> <span class="o">=</span> <span class="n">S_ERROR</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="名称构造">名称构造</h4>
<p>问题：根据WAN接口承载的业务类型(Bitmap)构造业务类型名称字符串。普通解法主体代码如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">void</span> <span class="nf">Sub_SetServerType</span><span class="p">(</span><span class="n">INT8U</span> <span class="o">*</span><span class="n">ServerType</span><span class="p">,</span> <span class="n">INT16U</span> <span class="n">wan_servertype</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">wan_servertype</span> <span class="o">&amp;</span> <span class="mh">0x0001</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x0001</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">strcat</span><span class="p">(</span><span class="n">ServerType</span><span class="p">,</span> <span class="s">&#34;_INTERNET&#34;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">wan_servertype</span> <span class="o">&amp;</span> <span class="mh">0x0002</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x0002</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">strcat</span><span class="p">(</span><span class="n">ServerType</span><span class="p">,</span> <span class="s">&#34;_TR069&#34;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">wan_servertype</span> <span class="o">&amp;</span> <span class="mh">0x0004</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x0004</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">strcat</span><span class="p">(</span><span class="n">ServerType</span><span class="p">,</span> <span class="s">&#34;_VOIP&#34;</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">((</span><span class="n">wan_servertype</span> <span class="o">&amp;</span> <span class="mh">0x0008</span><span class="p">)</span> <span class="o">==</span> <span class="mh">0x0008</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">strcat</span><span class="p">(</span><span class="n">ServerType</span><span class="p">,</span> <span class="s">&#34;_OTHER&#34;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>以下示出C语言中更简洁的实现方式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#define  GET_BIT(var, bit)   (((var) &gt;&gt; (bit)) &amp; 0x1)    </span><span class="cm">/* 获取var变量第bit位，编号从右至左 */</span><span class="cp">
</span><span class="cp"></span><span class="k">const</span> <span class="n">CHAR</span><span class="o">*</span> <span class="n">paSvrNames</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#34;_INTERNET&#34;</span><span class="p">,</span> <span class="s">&#34;_TR069&#34;</span><span class="p">,</span> <span class="s">&#34;_VOIP&#34;</span><span class="p">,</span> <span class="s">&#34;_OTHER&#34;</span><span class="p">};</span>
<span class="k">const</span> <span class="n">INT8U</span> <span class="n">ucSvrNameNum</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">paSvrNames</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">paSvrNames</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

<span class="n">VOID</span> <span class="nf">SetServerType</span><span class="p">(</span><span class="n">CHAR</span> <span class="o">*</span><span class="n">pszSvrType</span><span class="p">,</span> <span class="n">INT16U</span> <span class="n">wSvrType</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">INT8U</span> <span class="n">ucIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(;</span> <span class="n">ucIdx</span> <span class="o">&lt;</span> <span class="n">ucSvrNameNum</span><span class="p">;</span> <span class="n">ucIdx</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="mi">1</span> <span class="o">==</span> <span class="n">GET_BIT</span><span class="p">(</span><span class="n">wSvrType</span><span class="p">,</span> <span class="n">ucIdx</span><span class="p">))</span>
            <span class="n">strcat</span><span class="p">(</span><span class="n">pszSvrType</span><span class="p">,</span> <span class="n">paSvrNames</span><span class="p">[</span><span class="n">ucIdx</span><span class="p">]);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>新的实现将数据和逻辑分离，维护起来非常方便。只要逻辑(规则)不变，则唯一可能的改动就是数据(paSvrNames)。</p>
<h4 id="值名解析">值名解析</h4>
<p>问题：根据枚举变量取值输出其对应的字符串，如PORT_FE(1)输出“Fe”。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//值名映射表结构体定义，用于数值解析器
</span><span class="c1"></span><span class="k">typedef</span> <span class="k">struct</span><span class="p">{</span>
   <span class="n">INT32U</span> <span class="n">dwElem</span><span class="p">;</span>    <span class="c1">//待解析数值，通常为枚举变量
</span><span class="c1"></span>   <span class="n">CHAR</span><span class="o">*</span>  <span class="n">pszName</span><span class="p">;</span>   <span class="c1">//指向数值所对应解析名字符串的指针
</span><span class="c1"></span><span class="p">}</span><span class="n">T_NAME_PARSER</span><span class="p">;</span>

<span class="cm">/******************************************************************************
</span><span class="cm">* 函数名称:  NameParser
</span><span class="cm">* 功能说明:  数值解析器，将给定数值转换为对应的具名字符串
</span><span class="cm">* 输入参数:  VOID *pvMap       :值名映射表数组，含T_NAME_PARSER结构体类型元素
</span><span class="cm">                               VOID指针允许用户在保持成员数目和类型不变的前提下，
</span><span class="cm">                               定制更有意义的结构体名和/或成员名。
</span><span class="cm">            INT32U dwEntryNum :值名映射表数组条目数
</span><span class="cm">            INT32U dwElem     :待解析数值，通常为枚举变量
</span><span class="cm">            INT8U* pszDefName :缺省具名字符串指针，可为空
</span><span class="cm">* 输出参数:  NA
</span><span class="cm">* 返回值  :  INT8U *: 数值所对应的具名字符串
</span><span class="cm">            当无法解析给定数值时，若pszDefName为空，则返回数值对应的16进制格式
</span><span class="cm">            字符串；否则返回pszDefName。
</span><span class="cm">******************************************************************************/</span>
<span class="n">INT8U</span> <span class="o">*</span><span class="nf">NameParser</span><span class="p">(</span><span class="n">VOID</span> <span class="o">*</span><span class="n">pvMap</span><span class="p">,</span> <span class="n">INT32U</span> <span class="n">dwEntryNum</span><span class="p">,</span> <span class="n">INT32U</span> <span class="n">dwElem</span><span class="p">,</span> <span class="n">INT8U</span><span class="o">*</span> <span class="n">pszDefName</span><span class="p">)</span>
<span class="p">{</span>
   <span class="n">CHECK_SINGLE_POINTER</span><span class="p">(</span><span class="n">pvMap</span><span class="p">,</span> <span class="s">&#34;NullPoniter&#34;</span><span class="p">);</span>

   <span class="n">INT32U</span> <span class="n">dwEntryIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
   <span class="k">for</span><span class="p">(</span><span class="n">dwEntryIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">dwEntryIdx</span> <span class="o">&lt;</span> <span class="n">dwEntryNum</span><span class="p">;</span> <span class="n">dwEntryIdx</span><span class="o">++</span><span class="p">)</span>
   <span class="p">{</span>
       <span class="n">T_NAME_PARSER</span> <span class="o">*</span><span class="n">ptNameParser</span> <span class="o">=</span> <span class="p">(</span><span class="n">T_NAME_PARSER</span> <span class="o">*</span><span class="p">)</span><span class="n">pvMap</span><span class="p">;</span>
       <span class="k">if</span><span class="p">(</span><span class="n">dwElem</span> <span class="o">==</span> <span class="n">ptNameParser</span><span class="o">-&gt;</span><span class="n">dwElem</span><span class="p">)</span>
       <span class="p">{</span>
           <span class="k">return</span> <span class="n">ptNameParser</span><span class="o">-&gt;</span><span class="n">pszName</span><span class="p">;</span>
       <span class="p">}</span>
       <span class="c1">//ANSI标准禁止对void指针进行算法操作；GNU标准则指定void*算法操作与char*一致。
</span><span class="c1"></span>       <span class="c1">//若考虑移植性，可将pvMap类型改为INT8U*，或定义INT8U*局部变量指向pvMap。
</span><span class="c1"></span>       <span class="n">pvMap</span> <span class="o">+=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T_NAME_PARSER</span><span class="p">);</span>
   <span class="p">}</span>

   <span class="k">if</span><span class="p">(</span><span class="nb">NULL</span> <span class="o">!=</span> <span class="n">pszDefName</span><span class="p">)</span>
   <span class="p">{</span>
       <span class="k">return</span> <span class="n">pszDefName</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="k">else</span>
   <span class="p">{</span>
       <span class="k">static</span> <span class="n">INT8U</span> <span class="n">szName</span><span class="p">[</span><span class="mi">12</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span><span class="mi">0</span><span class="p">};</span> <span class="c1">//Max:&#34;0xFFFFFFFF&#34;
</span><span class="c1"></span>       <span class="n">sprintf</span><span class="p">(</span><span class="n">szName</span><span class="p">,</span> <span class="s">&#34;0x%X&#34;</span><span class="p">,</span> <span class="n">dwElem</span><span class="p">);</span>
       <span class="k">return</span> <span class="n">szName</span><span class="p">;</span>
   <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>以下给出NameParser的简单应用示例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">//UNI端口类型值名映射表结构体定义
</span><span class="c1"></span><span class="k">typedef</span> <span class="k">struct</span><span class="p">{</span>
    <span class="n">INT32U</span> <span class="n">dwPortType</span><span class="p">;</span>
    <span class="n">INT8U</span><span class="o">*</span> <span class="n">pszPortName</span><span class="p">;</span>
<span class="p">}</span><span class="n">T_PORT_NAME</span><span class="p">;</span>
<span class="c1">//UNI端口类型解析器
</span><span class="c1"></span><span class="n">T_PORT_NAME</span> <span class="n">gUniNameMap</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span><span class="mi">1</span><span class="p">,</span>      <span class="s">&#34;Fe&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="mi">3</span><span class="p">,</span>      <span class="s">&#34;Pots&#34;</span><span class="p">},</span>
    <span class="p">{</span><span class="mi">99</span><span class="p">,</span>     <span class="s">&#34;Vuni&#34;</span><span class="p">}</span>
<span class="p">};</span>
<span class="k">const</span> <span class="n">INT32U</span> <span class="n">UNI_NAM_MAP_NUM</span> <span class="o">=</span> <span class="p">(</span><span class="n">INT32U</span><span class="p">)(</span><span class="k">sizeof</span><span class="p">(</span><span class="n">gUniNameMap</span><span class="p">)</span><span class="o">/</span><span class="k">sizeof</span><span class="p">(</span><span class="n">T_PORT_NAME</span><span class="p">));</span>
<span class="n">VOID</span> <span class="nf">NameParserTest</span><span class="p">(</span><span class="n">VOID</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">INT8U</span> <span class="n">ucTestIndex</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>

    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;[%s]&lt;Test Case %u&gt; Result: %s!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">,</span> <span class="n">ucTestIndex</span><span class="o">++</span><span class="p">,</span>
           <span class="n">strcmp</span><span class="p">(</span><span class="s">&#34;Unknown&#34;</span><span class="p">,</span> <span class="n">NameParser</span><span class="p">(</span><span class="n">gUniNameMap</span><span class="p">,</span> <span class="n">UNI_NAM_MAP_NUM</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#34;Unknown&#34;</span><span class="p">))</span> <span class="o">?</span> <span class="s">&#34;ERROR&#34;</span> <span class="o">:</span> <span class="s">&#34;OK&#34;</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;[%s]&lt;Test Case %u&gt; Result: %s!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">,</span> <span class="n">ucTestIndex</span><span class="o">++</span><span class="p">,</span>
           <span class="n">strcmp</span><span class="p">(</span><span class="s">&#34;DefName&#34;</span><span class="p">,</span> <span class="n">NameParser</span><span class="p">(</span><span class="n">gUniNameMap</span><span class="p">,</span> <span class="n">UNI_NAM_MAP_NUM</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="s">&#34;DefName&#34;</span><span class="p">))</span> <span class="o">?</span> <span class="s">&#34;ERROR&#34;</span> <span class="o">:</span> <span class="s">&#34;OK&#34;</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;[%s]&lt;Test Case %u&gt; Result: %s!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">,</span> <span class="n">ucTestIndex</span><span class="o">++</span><span class="p">,</span>
           <span class="n">strcmp</span><span class="p">(</span><span class="s">&#34;Fe&#34;</span><span class="p">,</span> <span class="n">NameParser</span><span class="p">(</span><span class="n">gUniNameMap</span><span class="p">,</span> <span class="n">UNI_NAM_MAP_NUM</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s">&#34;Unknown&#34;</span><span class="p">))</span> <span class="o">?</span> <span class="s">&#34;ERROR&#34;</span> <span class="o">:</span> <span class="s">&#34;OK&#34;</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;[%s]&lt;Test Case %u&gt; Result: %s!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">,</span> <span class="n">ucTestIndex</span><span class="o">++</span><span class="p">,</span>
           <span class="n">strcmp</span><span class="p">(</span><span class="s">&#34;Pots&#34;</span><span class="p">,</span> <span class="n">NameParser</span><span class="p">(</span><span class="n">gUniNameMap</span><span class="p">,</span> <span class="n">UNI_NAM_MAP_NUM</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s">&#34;Unknown&#34;</span><span class="p">))</span> <span class="o">?</span> <span class="s">&#34;ERROR&#34;</span> <span class="o">:</span> <span class="s">&#34;OK&#34;</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;[%s]&lt;Test Case %u&gt; Result: %s!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">,</span> <span class="n">ucTestIndex</span><span class="o">++</span><span class="p">,</span>
           <span class="n">strcmp</span><span class="p">(</span><span class="s">&#34;Vuni&#34;</span><span class="p">,</span> <span class="n">NameParser</span><span class="p">(</span><span class="n">gUniNameMap</span><span class="p">,</span> <span class="n">UNI_NAM_MAP_NUM</span><span class="p">,</span> <span class="mi">99</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">))</span> <span class="o">?</span> <span class="s">&#34;ERROR&#34;</span> <span class="o">:</span> <span class="s">&#34;OK&#34;</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;[%s]&lt;Test Case %u&gt; Result: %s!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">,</span> <span class="n">ucTestIndex</span><span class="o">++</span><span class="p">,</span>
           <span class="n">strcmp</span><span class="p">(</span><span class="s">&#34;Unknown&#34;</span><span class="p">,</span> <span class="n">NameParser</span><span class="p">(</span><span class="n">gUniNameMap</span><span class="p">,</span> <span class="n">UNI_NAM_MAP_NUM</span><span class="p">,</span> <span class="mi">255</span><span class="p">,</span> <span class="s">&#34;Unknown&#34;</span><span class="p">))</span> <span class="o">?</span> <span class="s">&#34;ERROR&#34;</span> <span class="o">:</span> <span class="s">&#34;OK&#34;</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;[%s]&lt;Test Case %u&gt; Result: %s!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">,</span> <span class="n">ucTestIndex</span><span class="o">++</span><span class="p">,</span>
           <span class="n">strcmp</span><span class="p">(</span><span class="s">&#34;0xABCD&#34;</span><span class="p">,</span> <span class="n">NameParser</span><span class="p">(</span><span class="n">gUniNameMap</span><span class="p">,</span> <span class="n">UNI_NAM_MAP_NUM</span><span class="p">,</span> <span class="mh">0xABCD</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">))</span> <span class="o">?</span> <span class="s">&#34;ERROR&#34;</span> <span class="o">:</span> <span class="s">&#34;OK&#34;</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;[%s]&lt;Test Case %u&gt; Result: %s!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">__FUNCTION__</span><span class="p">,</span> <span class="n">ucTestIndex</span><span class="o">++</span><span class="p">,</span>
           <span class="n">strcmp</span><span class="p">(</span><span class="s">&#34;NullPoniter&#34;</span><span class="p">,</span> <span class="n">NameParser</span><span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">UNI_NAM_MAP_NUM</span><span class="p">,</span> <span class="mh">0xABCD</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">))</span> <span class="o">?</span> <span class="s">&#34;ERROR&#34;</span> <span class="o">:</span> <span class="s">&#34;OK&#34;</span><span class="p">);</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p><code>gUniNameMap</code>在实际项目中有十余个条目，若采用逻辑链实现将非常冗长。</p>
<h4 id="取值映射">取值映射</h4>
<p>问题：不同模块间同一参数枚举值取值可能有所差异，需要适配。此处不再给出普通的switch…case或if…else if…else结构，而直接示出以下表驱动实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">typedef</span> <span class="k">struct</span><span class="p">{</span>
    <span class="n">PORTSTATE</span> <span class="n">loopMEState</span><span class="p">;</span>
    <span class="n">PORTSTATE</span> <span class="n">loopMIBState</span><span class="p">;</span>
<span class="p">}</span><span class="n">LOOPMAPSTRUCT</span><span class="p">;</span>

<span class="k">static</span> <span class="n">LOOPMAPSTRUCT</span> <span class="n">s_CesLoop</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span><span class="n">NO_LOOP</span><span class="p">,</span>                  <span class="n">e_ds1_looptype_noloop</span><span class="p">},</span>
    <span class="p">{</span><span class="n">PAYLOAD_LOOP</span><span class="p">,</span>             <span class="n">e_ds1_looptype_PayloadLoop</span><span class="p">},</span>
    <span class="p">{</span><span class="n">LINE_LOOP</span><span class="p">,</span>                <span class="n">e_ds1_looptype_LineLoop</span><span class="p">},</span>
    <span class="p">{</span><span class="n">PON_LOOP</span><span class="p">,</span>                 <span class="n">e_ds1_looptype_OtherLoop</span><span class="p">},</span>
    <span class="p">{</span><span class="n">CES_LOOP</span><span class="p">,</span>                 <span class="n">e_ds1_looptype_InwardLoop</span><span class="p">}};</span>

<span class="n">PORTSTATE</span> <span class="nf">ConvertLoopMEStateToMIBState</span><span class="p">(</span><span class="n">PORTSTATE</span> <span class="n">vPortState</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">INT32U</span> <span class="n">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ii</span><span class="p">;</span>

    <span class="n">num</span> <span class="o">=</span> <span class="n">ARRAY_NUM</span><span class="p">(</span><span class="n">s_CesLoop</span><span class="p">);</span>
    <span class="k">for</span><span class="p">(</span><span class="n">ii</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">ii</span> <span class="o">&lt;</span> <span class="n">num</span><span class="p">;</span> <span class="n">ii</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="n">vPortState</span> <span class="o">==</span> <span class="n">s_CesLoop</span><span class="p">[</span><span class="n">ii</span><span class="p">].</span><span class="n">loopMEState</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">s_CesLoop</span><span class="p">[</span><span class="n">ii</span><span class="p">].</span><span class="n">loopMIBState</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="n">e_ds1_looptype_noloop</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>相应地，从loopMIBState映射到loopMEState需要定义一个ConvertLoopMIBStateToMEState函数。更进一步，所有类似的一对一映射关系都必须如上的映射(转换)函数，相当繁琐。事实上，从抽象层面看，该映射关系非常简单。提取共性后定义带参数宏，如下所示：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cm">/**********************************************************
</span><span class="cm">* 功能描述：进行二维数组映射表的一对一映射，用于参数适配
</span><span class="cm">* 参数说明：map        -- 二维数组映射表
</span><span class="cm">            elemSrc    -- 映射源，即待映射的元素值
</span><span class="cm">            elemDest   -- 映射源对应的映射结果
</span><span class="cm">            direction  -- 映射方向字节，表示从数组哪列映射至哪列。
</span><span class="cm">                          高4位对应映射源列，低4位对应映射结果列。
</span><span class="cm">            defaultVal -- 映射失败时置映射结果为缺省值
</span><span class="cm">* 示例：    ARRAY_MAPPER(gCesLoopMap, 3, ucLoop, 0x10, NO_LOOP);
</span><span class="cm">            则ucLoop = 2(LINE_LOOP)
</span><span class="cm">**********************************************************/</span>
<span class="cp">#define ARRAY_MAPPER(map, elemSrc, elemDest, direction, defaultVal) do{\
</span><span class="cp">    INT8U ucMapIdx = 0, ucMapNum = 0; \
</span><span class="cp">    ucMapNum = sizeof(map)/sizeof(map[0]); \
</span><span class="cp">    for(ucMapIdx = 0; ucMapIdx &lt; ucMapNum; ucMapIdx++) \
</span><span class="cp">    { \
</span><span class="cp">        if((elemSrc) == map[ucMapIdx][((direction)&amp;0xF0)&gt;&gt;4]) \
</span><span class="cp">        { \
</span><span class="cp">            elemDest = map[ucMapIdx][(direction)&amp;0x0F]; \
</span><span class="cp">            break; \
</span><span class="cp">        } \
</span><span class="cp">    } \
</span><span class="cp">    if(ucMapIdx == ucMapNum) \
</span><span class="cp">    { \
</span><span class="cp">        elemDest = (defaultVal); \
</span><span class="cp">    } \
</span><span class="cp">}while(0)
</span></code></pre></td></tr></table>
</div>
</div><p>参数取值转换时直接调用统一的映射器宏，如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span><span class="lnt">7
</span><span class="lnt">8
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">static</span> <span class="n">INT8U</span> <span class="n">gCesLoopMap</span><span class="p">[][</span><span class="mi">2</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
   <span class="p">{</span><span class="n">NO_LOOP</span><span class="p">,</span>                  <span class="n">e_ds1_looptype_noloop</span><span class="p">},</span>
   <span class="p">{</span><span class="n">PAYLOAD_LOOP</span><span class="p">,</span>             <span class="n">e_ds1_looptype_PayloadLoop</span><span class="p">},</span>
   <span class="p">{</span><span class="n">LINE_LOOP</span><span class="p">,</span>                <span class="n">e_ds1_looptype_LineLoop</span><span class="p">},</span>
   <span class="p">{</span><span class="n">PON_LOOP</span><span class="p">,</span>                 <span class="n">e_ds1_looptype_OtherLoop</span><span class="p">},</span>
   <span class="p">{</span><span class="n">CES_LOOP</span><span class="p">,</span>                 <span class="n">e_ds1_looptype_InwardLoop</span><span class="p">}};</span>

<span class="n">ARRAY_MAPPER</span><span class="p">(</span><span class="n">gCesLoopMap</span><span class="p">,</span> <span class="n">tPara</span><span class="p">.</span><span class="n">dwParaVal</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">dwLoopConf</span><span class="p">,</span> <span class="mh">0x01</span><span class="p">,</span> <span class="n">e_ds1_looptype_noloop</span><span class="p">);</span>
</code></pre></td></tr></table>
</div>
</div><p>另举一例：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cp">#define  CES_DEFAULT_JITTERBUF        (INT32U)2000   </span><span class="cm">/* 默认jitterbuf为2000us，而1帧=125us */</span><span class="cp">
</span><span class="cp">#define  CES_JITTERBUF_STEP           (INT32U)125    </span><span class="cm">/* jitterbuf步长为125us，即1帧 */</span><span class="cp">
</span><span class="cp">#define  CES_DEFAULT_QUEUESIZE        (INT32U)5
</span><span class="cp">#define  CES_DEFAULT_MAX_QUEUESIZE    (INT32U)7
</span><span class="cp"></span>
<span class="cp">#define  ARRAY_NUM(array)             (sizeof(array) / sizeof((array)[0]))  </span><span class="cm">/* 数组元素个数 */</span><span class="cp">
</span><span class="cp"></span><span class="k">typedef</span> <span class="k">struct</span><span class="p">{</span>
   <span class="n">INT32U</span>  <span class="n">dwJitterBuffer</span><span class="p">;</span>
   <span class="n">INT32U</span>  <span class="n">dwFramePerPkt</span><span class="p">;</span>
   <span class="n">INT32U</span>  <span class="n">dwQueueSize</span><span class="p">;</span>
<span class="p">}</span><span class="n">QUEUE_SIZE_MAP</span><span class="p">;</span>
<span class="cm">/* gCesQueueSizeMap也可以(JitterBuffer / FramePerPkt)值为索引，更加紧凑 */</span>
<span class="k">static</span> <span class="n">QUEUE_SIZE_MAP</span> <span class="n">gCesQueueSizeMap</span><span class="p">[]</span><span class="o">=</span> <span class="p">{</span>
      <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span>  <span class="p">{</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span>  <span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">},</span>  <span class="p">{</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">3</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">},</span>  <span class="p">{</span><span class="mi">3</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span>  <span class="p">{</span><span class="mi">4</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">},</span>  <span class="p">{</span><span class="mi">4</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">1</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">5</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">},</span>  <span class="p">{</span><span class="mi">5</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">},</span>  <span class="p">{</span><span class="mi">6</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">},</span>  <span class="p">{</span><span class="mi">6</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">7</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">},</span>  <span class="p">{</span><span class="mi">7</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">},</span>  <span class="p">{</span><span class="mi">8</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">4</span><span class="p">},</span>  <span class="p">{</span><span class="mi">8</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">9</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span>  <span class="p">{</span><span class="mi">9</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">},</span>  <span class="p">{</span><span class="mi">10</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="mi">10</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">11</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="mi">11</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">},</span> <span class="p">{</span><span class="mi">12</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="mi">12</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">13</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="mi">13</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">},</span> <span class="p">{</span><span class="mi">14</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="mi">14</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">15</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="mi">15</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">},</span> <span class="p">{</span><span class="mi">16</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="mi">16</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">4</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">17</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">17</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="mi">18</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">18</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">19</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">19</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="mi">20</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">20</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">21</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">21</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="mi">22</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">22</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">23</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">23</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="mi">24</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">24</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">25</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">25</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="mi">26</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">26</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">27</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">27</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="mi">28</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">28</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">29</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">29</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="mi">30</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">30</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span>
      <span class="p">{</span><span class="mi">31</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">31</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">},</span> <span class="p">{</span><span class="mi">32</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">6</span><span class="p">},</span> <span class="p">{</span><span class="mi">32</span><span class="p">,</span><span class="mi">2</span><span class="p">,</span><span class="mi">5</span><span class="p">}};</span>
<span class="cm">/**********************************************************
</span><span class="cm">* 函数名称： CalcQueueSize
</span><span class="cm">* 功能描述： 根据JitterBuffer和FramePerPkt计算QueueSize
</span><span class="cm">* 注意事项： 配置的最大缓存深度
</span><span class="cm">*            = 2 * JitterBuffer / FramePerPkt
</span><span class="cm">*            = 2 * N Packet = 2 ^ QueueSize
</span><span class="cm">*            JitterBuffer为125us帧速率的倍数，
</span><span class="cm">*            FramePerPkt为每个分组的帧数，
</span><span class="cm">*            QueueSize向上取整，最大为7。
</span><span class="cm">**********************************************************/</span>
<span class="n">INT32U</span> <span class="nf">CalcQueueSize</span><span class="p">(</span><span class="n">INT32U</span> <span class="n">dwJitterBuffer</span><span class="p">,</span> <span class="n">INT32U</span> <span class="n">dwFramePerPkt</span><span class="p">)</span>
<span class="p">{</span>
   <span class="n">INT8U</span> <span class="n">ucIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">ucNum</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

   <span class="c1">//本函数暂时仅考虑E1
</span><span class="c1"></span>   <span class="n">ucNum</span> <span class="o">=</span> <span class="n">ARRAY_NUM</span><span class="p">(</span><span class="n">gCesQueueSizeMap</span><span class="p">);</span>
   <span class="k">for</span><span class="p">(</span><span class="n">ucIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">ucIdx</span> <span class="o">&lt;</span> <span class="n">ucNum</span><span class="p">;</span> <span class="n">ucIdx</span><span class="o">++</span><span class="p">)</span>
   <span class="p">{</span>
      <span class="k">if</span><span class="p">((</span><span class="n">dwJitterBuffer</span> <span class="o">==</span> <span class="n">gCesQueueSizeMap</span><span class="p">[</span><span class="n">ucIdx</span><span class="p">].</span><span class="n">dwJitterBuffer</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
         <span class="p">(</span><span class="n">dwFramePerPkt</span> <span class="o">==</span> <span class="n">gCesQueueSizeMap</span><span class="p">[</span><span class="n">ucIdx</span><span class="p">].</span><span class="n">dwFramePerPkt</span><span class="p">))</span>
      <span class="p">{</span>
           <span class="k">return</span> <span class="n">gCesQueueSizeMap</span><span class="p">[</span><span class="n">ucIdx</span><span class="p">].</span><span class="n">dwQueueSize</span><span class="p">;</span>
      <span class="p">}</span>
   <span class="p">}</span>

   <span class="k">return</span> <span class="n">CES_DEFAULT_MAX_QUEUESIZE</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="版本控制">版本控制</h4>
<p>问题：控制OLT与ONU之间的版本协商。ONU本地设置三比特控制字，其中bit2(MSB)~bit0(LSB)分别对应0x21、0x30和0xAA版本号；且bitX为0表示上报对应版本号，bitX为1表示不上报对应版本号。其他版本号如0x20、0x13和0x1必须上报，即不受控制。最初的实现采用if…else if…else结构，代码非常冗长，如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">ucLength</span> <span class="o">=</span> <span class="mh">0x1f</span><span class="p">;</span>
<span class="k">if</span> <span class="p">(</span><span class="n">gOamCtrlCode</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">vosMemCpy</span><span class="p">(</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">,</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x30</span><span class="p">;</span>
    <span class="n">vosMemCpy</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">4</span><span class="p">]),</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x21</span><span class="p">;</span>
    <span class="n">vosMemCpy</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">8</span><span class="p">]),</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x20</span><span class="p">;</span>
    <span class="n">vosMemCpy</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">12</span><span class="p">]),</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x13</span><span class="p">;</span>
    <span class="n">vosMemCpy</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">16</span><span class="p">]),</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x01</span><span class="p">;</span>
    <span class="n">vosMemCpy</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">20</span><span class="p">]),</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">23</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xaa</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">gOamCtrlCode</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">vosMemCpy</span><span class="p">(</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">,</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x30</span><span class="p">;</span>
    <span class="n">vosMemCpy</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">4</span><span class="p">]),</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x21</span><span class="p">;</span>
    <span class="n">vosMemCpy</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">8</span><span class="p">]),</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x20</span><span class="p">;</span>
    <span class="n">vosMemCpy</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">12</span><span class="p">]),</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">15</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x13</span><span class="p">;</span>
    <span class="n">vosMemCpy</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">16</span><span class="p">]),</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">19</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x01</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">//此处省略gOamCtrlCode == 2~6的处理代码
</span><span class="c1"></span><span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">gOamCtrlCode</span> <span class="o">==</span> <span class="mi">7</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">vosMemCpy</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">),</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">3</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x20</span><span class="p">;</span>
    <span class="n">vosMemCpy</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">4</span><span class="p">]),</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">7</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x13</span><span class="p">;</span>
    <span class="n">vosMemCpy</span><span class="p">(</span><span class="o">&amp;</span><span class="p">(</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">8</span><span class="p">]),</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
    <span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="mi">11</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x01</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>以下示出C语言中更简洁的实现方式(基于二维数组)：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cm">/**********************************************************************
</span><span class="cm">* 版本控制字数组定义
</span><span class="cm">* gOamCtrlCode:   Bitmap控制字。Bit-X为0时上报对应版本，Bit-X为1时屏蔽对应版本。
</span><span class="cm">* CTRL_VERS_NUM:  可控版本个数。
</span><span class="cm">* CTRL_CODE_NUM:  控制字个数。与CTRL_VERS_NUM有关。
</span><span class="cm">* gOamVerCtrlMap: 版本控制字数组。行对应控制字，列对应可控版本。
</span><span class="cm">                  元素值为0时不上报对应版本，元素值非0时上报该元素值。
</span><span class="cm">* Note: 该数组旨在实现“数据与控制隔离”。后续若要新增可控版本，只需修改
</span><span class="cm">                  -- CTRL_VERS_NUM
</span><span class="cm">                  -- gOamVerCtrlMap新增行(控制字)
</span><span class="cm">                  -- gOamVerCtrlMap新增列(可控版本)
</span><span class="cm">**********************************************************************/</span>
<span class="cp">#define CTRL_VERS_NUM    3
</span><span class="cp">#define CTRL_CODE_NUM    (1&lt;&lt;CTRL_VERS_NUM)
</span><span class="cp"></span><span class="n">u8_t</span> <span class="n">gOamVerCtrlMap</span><span class="p">[</span><span class="n">CTRL_CODE_NUM</span><span class="p">][</span><span class="n">CTRL_VERS_NUM</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
 <span class="cm">/* Ver21         Ver30        VerAA */</span>
    <span class="p">{</span><span class="mh">0x21</span><span class="p">,</span>         <span class="mh">0x30</span><span class="p">,</span>        <span class="mh">0xaa</span><span class="p">},</span>    <span class="cm">/*gOamCtrlCode = 0*/</span>
    <span class="p">{</span><span class="mh">0x21</span><span class="p">,</span>         <span class="mh">0x30</span><span class="p">,</span>          <span class="mi">0</span> <span class="p">},</span>    <span class="cm">/*gOamCtrlCode = 1*/</span>
    <span class="p">{</span><span class="mh">0x21</span><span class="p">,</span>           <span class="mi">0</span><span class="p">,</span>         <span class="mh">0xaa</span><span class="p">},</span>    <span class="cm">/*gOamCtrlCode = 2*/</span>
    <span class="p">{</span><span class="mh">0x21</span><span class="p">,</span>           <span class="mi">0</span><span class="p">,</span>           <span class="mi">0</span> <span class="p">},</span>    <span class="cm">/*gOamCtrlCode = 3*/</span>
    <span class="p">{</span>  <span class="mi">0</span><span class="p">,</span>          <span class="mh">0x30</span><span class="p">,</span>        <span class="mh">0xaa</span><span class="p">},</span>    <span class="cm">/*gOamCtrlCode = 4*/</span>
    <span class="p">{</span>  <span class="mi">0</span><span class="p">,</span>          <span class="mh">0x30</span><span class="p">,</span>          <span class="mi">0</span> <span class="p">},</span>    <span class="cm">/*gOamCtrlCode = 5*/</span>
    <span class="p">{</span>  <span class="mi">0</span><span class="p">,</span>            <span class="mi">0</span><span class="p">,</span>         <span class="mh">0xaa</span><span class="p">},</span>    <span class="cm">/*gOamCtrlCode = 6*/</span>
    <span class="p">{</span>  <span class="mi">0</span><span class="p">,</span>            <span class="mi">0</span><span class="p">,</span>           <span class="mi">0</span> <span class="p">}</span>     <span class="cm">/*gOamCtrlCode = 7*/</span>
<span class="p">};</span>
<span class="cp">#define INFO_TYPE_VERS_LEN    7  </span><span class="cm">/* InfoType + Length + OUI + ExtSupport + Version */</span><span class="cp">
</span><span class="cp"></span>
<span class="n">u8_t</span> <span class="n">verIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="n">u8_t</span> <span class="n">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">for</span><span class="p">(</span><span class="n">verIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">verIdx</span> <span class="o">&lt;</span> <span class="n">CTRL_VERS_NUM</span><span class="p">;</span> <span class="n">verIdx</span><span class="o">++</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">gOamVerCtrlMap</span><span class="p">[</span><span class="n">gOamCtrlCode</span><span class="p">][</span><span class="n">verIdx</span><span class="p">]</span> <span class="o">!=</span> <span class="mi">0</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">vosMemCpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
        <span class="n">index</span> <span class="o">+=</span> <span class="mi">3</span><span class="p">;</span>
        <span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="n">index</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="n">gOamVerCtrlMap</span><span class="p">[</span><span class="n">gOamCtrlCode</span><span class="p">][</span><span class="n">verIdx</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="n">vosMemCpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="n">index</span> <span class="o">+=</span> <span class="mi">3</span><span class="p">;</span>
<span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="n">index</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x20</span><span class="p">;</span>
<span class="n">vosMemCpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="n">index</span> <span class="o">+=</span> <span class="mi">3</span><span class="p">;</span>
<span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="n">index</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x13</span><span class="p">;</span>
<span class="n">vosMemCpy</span><span class="p">(</span><span class="o">&amp;</span><span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="n">index</span><span class="p">],</span> <span class="n">ctc_oui</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="n">index</span> <span class="o">+=</span> <span class="mi">3</span><span class="p">;</span>
<span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">aucVersionList</span><span class="p">[</span><span class="n">index</span><span class="o">++</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0x01</span><span class="p">;</span>

<span class="n">pstSendTlv</span><span class="o">-&gt;</span><span class="n">ucLength</span> <span class="o">=</span> <span class="n">INFO_TYPE_VERS_LEN</span> <span class="o">+</span> <span class="n">index</span><span class="p">;</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="消息处理">消息处理</h4>
<p>问题：终端输入不同的打印命令，调用相应的打印函数，以控制不同级别的打印。</p>
<p>这是一段消息(事件)驱动程序。本模块接收其他模块(如串口驱动)发送的消息，根据消息中的打印级别字符串和开关模式，调用不同函数进行处理。常见的实现方法如下：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">void</span> <span class="nf">logall</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">g_log_control</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mh">0xFFFFFFFF</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">noanylog</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">g_log_control</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">logOam</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">g_log_control</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">|=</span> <span class="p">(</span><span class="mh">0x01</span> <span class="o">&lt;&lt;</span> <span class="n">FUNCTION_Oam</span><span class="p">);</span>
<span class="p">}</span>
<span class="kt">void</span> <span class="nf">nologOam</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">g_log_control</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">&amp;=</span> <span class="o">~</span><span class="p">(</span><span class="mh">0x01</span> <span class="o">&lt;&lt;</span> <span class="n">FUNCTION_Oam</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">//... ...
</span><span class="c1"></span><span class="kt">void</span> <span class="nf">logExec</span><span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="n">name</span><span class="p">,</span> <span class="n">INT8U</span> <span class="n">enable</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">CtcOamLog</span><span class="p">(</span><span class="n">FUNCTION_Oam</span><span class="p">,</span><span class="s">&#34;log %s %d</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span><span class="n">name</span><span class="p">,</span><span class="n">enable</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">enable</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="cm">/*log*/</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="s">&#34;all&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/*字符串比较，不区分大小写*/</span>
            <span class="n">logall</span><span class="p">();</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="s">&#34;oam&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">logOam</span><span class="p">();</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="s">&#34;pon&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">logPon</span><span class="p">();</span>
        <span class="c1">//... ...
</span><span class="c1"></span>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="s">&#34;version&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">logVersion</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">enable</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="cm">/*nolog*/</span>
    <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="s">&#34;all&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">noanylog</span><span class="p">();</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="s">&#34;oam&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">nologOam</span><span class="p">();</span>
        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="s">&#34;pon&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">nologPon</span><span class="p">();</span>
        <span class="c1">//... ...
</span><span class="c1"></span>        <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">name</span><span class="p">,</span><span class="s">&#34;version&#34;</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">nologVersion</span><span class="p">();</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;bad log para</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>以下示出C语言中更简洁的实现方式：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">typedef</span> <span class="k">struct</span><span class="p">{</span>
    <span class="n">OAM_LOG_OFF</span> <span class="o">=</span> <span class="p">(</span><span class="n">INT8U</span><span class="p">)</span><span class="mi">0</span><span class="p">,</span>
    <span class="n">OAM_LOG_ON</span>  <span class="o">=</span> <span class="p">(</span><span class="n">INT8U</span><span class="p">)</span><span class="mi">1</span>
<span class="p">}</span><span class="n">E_OAM_LOG_MODE</span><span class="p">;</span>
<span class="k">typedef</span> <span class="nf">FUNC_STATUS</span> <span class="p">(</span><span class="o">*</span><span class="n">OamLogHandler</span><span class="p">)(</span><span class="n">VOID</span><span class="p">);</span>
<span class="k">typedef</span> <span class="k">struct</span><span class="p">{</span>
    <span class="n">CHAR</span>           <span class="o">*</span><span class="n">pszLogCls</span><span class="p">;</span>    <span class="cm">/* 打印级别 */</span>
    <span class="n">E_OAM_LOG_MODE</span> <span class="n">eLogMode</span><span class="p">;</span>      <span class="cm">/* 打印模式 */</span>
    <span class="n">OamLogHandler</span>  <span class="n">fnLogHandler</span><span class="p">;</span>  <span class="cm">/* 打印函数 */</span>
<span class="p">}</span><span class="n">T_OAM_LOG_MAP</span><span class="p">;</span>

<span class="n">T_OAM_LOG_MAP</span> <span class="n">gOamLogMap</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="p">{</span><span class="s">&#34;all&#34;</span><span class="p">,</span>         <span class="n">OAM_LOG_OFF</span><span class="p">,</span>       <span class="n">noanylog</span><span class="p">},</span>
    <span class="p">{</span><span class="s">&#34;oam&#34;</span><span class="p">,</span>         <span class="n">OAM_LOG_OFF</span><span class="p">,</span>       <span class="n">nologOam</span><span class="p">},</span>
    <span class="c1">//... ...
</span><span class="c1"></span>    <span class="p">{</span><span class="s">&#34;version&#34;</span><span class="p">,</span>     <span class="n">OAM_LOG_OFF</span><span class="p">,</span>       <span class="n">nologVersion</span><span class="p">},</span>

    <span class="p">{</span><span class="s">&#34;all&#34;</span><span class="p">,</span>         <span class="n">OAM_LOG_ON</span><span class="p">,</span>        <span class="n">logall</span><span class="p">},</span>
    <span class="p">{</span><span class="s">&#34;oam&#34;</span><span class="p">,</span>         <span class="n">OAM_LOG_ON</span><span class="p">,</span>        <span class="n">logOam</span><span class="p">},</span>
    <span class="c1">//... ...
</span><span class="c1"></span>    <span class="p">{</span><span class="s">&#34;version&#34;</span><span class="p">,</span>     <span class="n">OAM_LOG_ON</span><span class="p">,</span>        <span class="n">logVersion</span><span class="p">}</span>
<span class="p">};</span>
<span class="n">INT32U</span> <span class="n">gOamLogMapNum</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">gOamLogMap</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">T_OAM_LOG_MAP</span><span class="p">);</span>

<span class="n">VOID</span> <span class="nf">logExec</span><span class="p">(</span><span class="n">CHAR</span> <span class="o">*</span><span class="n">pszName</span><span class="p">,</span> <span class="n">INT8U</span> <span class="n">ucSwitch</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">INT8U</span> <span class="n">ucIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(;</span> <span class="n">ucIdx</span> <span class="o">&lt;</span> <span class="n">gOamLogMapNum</span><span class="p">;</span> <span class="n">ucIdx</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">((</span><span class="n">ucSwitch</span> <span class="o">==</span> <span class="n">gOamLogMap</span><span class="p">[</span><span class="n">ucIdx</span><span class="p">].</span><span class="n">eLogMode</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
           <span class="p">(</span><span class="o">!</span><span class="n">strcasecmp</span><span class="p">(</span><span class="n">pszName</span><span class="p">,</span> <span class="n">gOamLogMap</span><span class="p">[</span><span class="n">ucIdx</span><span class="p">].</span><span class="n">pszLogCls</span><span class="p">));</span>
        <span class="p">{</span>
            <span class="n">gOamLogMap</span><span class="p">[</span><span class="n">ucIdx</span><span class="p">].</span><span class="n">fnLogHandler</span><span class="p">();</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">if</span><span class="p">(</span><span class="n">ucIdx</span> <span class="o">==</span> <span class="n">gOamLogMapNum</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">printf</span><span class="p">(</span><span class="s">&#34;Unknown LogClass(%s) or LogMode(%d)!</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">pszName</span><span class="p">,</span> <span class="n">ucSwitch</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>这种表驱动消息处理实现的优点如下：</p>
<ul>
<li>增强可读性，消息如何处理从表中一目了然。</li>
<li>增强可扩展性。更容易修改，要增加新的消息，只要修改数据即可，不需要修改流程。</li>
<li>降低复杂度。通过把程序逻辑的复杂度转移到人类更容易处理的数据中来，从而达到控制复杂度的目标。</li>
<li>主干清晰，代码重用。
若各索引为顺序枚举值，则建立多维数组(每维对应一个索引)，根据下标直接定位到处理函数，效率会更高。</li>
</ul>
<p>注意，考虑到本节实例中logOam/logPon或nologOam/nologPon等函数本质上是基于打印级别的比特操作，因此可进一步简化。以下例举其相似实现：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span><span class="lnt">33
</span><span class="lnt">34
</span><span class="lnt">35
</span><span class="lnt">36
</span><span class="lnt">37
</span><span class="lnt">38
</span><span class="lnt">39
</span><span class="lnt">40
</span><span class="lnt">41
</span><span class="lnt">42
</span><span class="lnt">43
</span><span class="lnt">44
</span><span class="lnt">45
</span><span class="lnt">46
</span><span class="lnt">47
</span><span class="lnt">48
</span><span class="lnt">49
</span><span class="lnt">50
</span><span class="lnt">51
</span><span class="lnt">52
</span><span class="lnt">53
</span><span class="lnt">54
</span><span class="lnt">55
</span><span class="lnt">56
</span><span class="lnt">57
</span><span class="lnt">58
</span><span class="lnt">59
</span><span class="lnt">60
</span><span class="lnt">61
</span><span class="lnt">62
</span><span class="lnt">63
</span><span class="lnt">64
</span><span class="lnt">65
</span><span class="lnt">66
</span><span class="lnt">67
</span><span class="lnt">68
</span><span class="lnt">69
</span><span class="lnt">70
</span><span class="lnt">71
</span><span class="lnt">72
</span><span class="lnt">73
</span><span class="lnt">74
</span><span class="lnt">75
</span><span class="lnt">76
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cm">/* 日志控制类型定义 */</span>
<span class="k">typedef</span> <span class="k">enum</span>
<span class="p">{</span>
    <span class="n">LOG_NORM</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span>        <span class="cm">/* 未分类日志，可用于通用日志 */</span>
    <span class="n">LOG_FRM</span><span class="p">,</span>             <span class="cm">/* Frame，OMCI帧日志 */</span>
    <span class="n">LOG_PON</span><span class="p">,</span>             <span class="cm">/* Pon，光链路相关日志 */</span>
    <span class="n">LOG_ETH</span><span class="p">,</span>             <span class="cm">/* Ethernet，Layer2以太网日志 */</span>
    <span class="n">LOG_NET</span><span class="p">,</span>             <span class="cm">/* Internet，Layer3网络日志 */</span>
    <span class="n">LOG_MULT</span><span class="p">,</span>            <span class="cm">/* Multicast，组播日志 */</span>
    <span class="n">LOG_QOS</span><span class="p">,</span>             <span class="cm">/* QOS，流量日志 */</span>
    <span class="n">LOG_CES</span><span class="p">,</span>             <span class="cm">/* Ces，TDM电路仿真日志 */</span>
    <span class="n">LOG_VOIP</span><span class="p">,</span>            <span class="cm">/* Voip，语音日志 */</span>
    <span class="n">LOG_ALM</span><span class="p">,</span>             <span class="cm">/* Alarm，告警日志 */</span>
    <span class="n">LOG_PERF</span><span class="p">,</span>            <span class="cm">/* Performance，性能统计日志 */</span>
    <span class="n">LOG_VER</span><span class="p">,</span>             <span class="cm">/* Version，软件升级日志 */</span>
    <span class="n">LOG_XDSL</span><span class="p">,</span>            <span class="cm">/* xDsl日志 */</span>
    <span class="n">LOG_DB</span><span class="p">,</span>              <span class="cm">/* 数据库操作日志 */</span>
    <span class="c1">//新日志类型在此处扩展，共支持32种日志类型
</span><span class="c1"></span>    <span class="n">LOG_ALL</span> <span class="o">=</span> <span class="n">UINT_MAX</span>   <span class="cm">/* 所有日志类型 */</span>
<span class="p">}</span><span class="n">E_LOG_TYPE</span><span class="p">;</span>

<span class="cm">/*****************************************************************************
</span><span class="cm"> * 变量名称：gOmciLogCtrl
</span><span class="cm"> * 作用描述：OMCI日志控制字，BitMap格式(比特编号从LSB至MSB依次为Bit0-&gt;BitN)。
</span><span class="cm"> *           Bit0~N分别对应E_LOG_TYPE各枚举值(除LOG_ALL外)。
</span><span class="cm"> *           BitX为0时关闭日志类型对应的日志功能，BitX为1时则予以打开。
</span><span class="cm"> * 变量范围：该变量为四字节整型静态全局变量，即支持32种日志类型。
</span><span class="cm"> * 访问说明：通过GetOmciLogCtrl/SetOmciLogCtrl/OmciLogCtrl函数访问/设置控制字。
</span><span class="cm"> *****************************************************************************/</span>
<span class="k">static</span> <span class="n">INT32U</span> <span class="n">gOmciLogCtrl</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="c1">//日志类型字符串数组，下标为各字符串所对应的日志类型枚举值。
</span><span class="c1"></span><span class="k">static</span> <span class="k">const</span> <span class="n">INT8U</span><span class="o">*</span> <span class="n">paLogTypeName</span><span class="p">[]</span> <span class="o">=</span> <span class="p">{</span>
    <span class="s">&#34;Norm&#34;</span><span class="p">,</span>        <span class="s">&#34;Frame&#34;</span><span class="p">,</span>   <span class="s">&#34;Pon&#34;</span><span class="p">,</span>  <span class="s">&#34;Ethernet&#34;</span><span class="p">,</span>  <span class="s">&#34;Internet&#34;</span><span class="p">,</span>
    <span class="s">&#34;Multicast&#34;</span><span class="p">,</span>   <span class="s">&#34;Qos&#34;</span><span class="p">,</span>     <span class="s">&#34;Ces&#34;</span><span class="p">,</span>  <span class="s">&#34;Voip&#34;</span><span class="p">,</span>      <span class="s">&#34;Alarm&#34;</span><span class="p">,</span>
    <span class="s">&#34;Performance&#34;</span><span class="p">,</span> <span class="s">&#34;Version&#34;</span><span class="p">,</span> <span class="s">&#34;Xdsl&#34;</span><span class="p">,</span>  <span class="s">&#34;Db&#34;</span>
<span class="p">};</span>
<span class="k">static</span> <span class="k">const</span> <span class="n">INT8U</span>  <span class="n">ucLogTypeNameNum</span> <span class="o">=</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">paLogTypeName</span><span class="p">)</span> <span class="o">/</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">paLogTypeName</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>

<span class="k">static</span> <span class="n">VOID</span> <span class="nf">SetGlobalLogCtrl</span><span class="p">(</span><span class="n">E_LOG_TYPE</span> <span class="n">eLogType</span><span class="p">,</span> <span class="n">INT8U</span> <span class="n">ucLogSwitch</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">LOG_ON</span> <span class="o">==</span> <span class="n">ucLogSwitch</span><span class="p">)</span>
        <span class="n">gOmciLogCtrl</span> <span class="o">=</span> <span class="n">LOG_ALL</span><span class="p">;</span>
    <span class="k">else</span>
        <span class="n">gOmciLogCtrl</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
<span class="k">static</span> <span class="n">VOID</span> <span class="nf">SetSpecificLogCtrl</span><span class="p">(</span><span class="n">E_LOG_TYPE</span> <span class="n">eLogType</span><span class="p">,</span> <span class="n">INT8U</span> <span class="n">ucLogSwitch</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="n">LOG_ON</span> <span class="o">==</span> <span class="n">ucLogSwitch</span><span class="p">)</span>
        <span class="n">SET_BIT</span><span class="p">(</span><span class="n">gOmciLogCtrl</span><span class="p">,</span> <span class="n">eLogType</span><span class="p">);</span>
    <span class="k">else</span>
        <span class="n">CLR_BIT</span><span class="p">(</span><span class="n">gOmciLogCtrl</span><span class="p">,</span> <span class="n">eLogType</span><span class="p">);</span>
<span class="p">}</span>

<span class="n">VOID</span> <span class="nf">OmciLogCtrl</span><span class="p">(</span><span class="n">CHAR</span> <span class="o">*</span><span class="n">pszLogType</span><span class="p">,</span> <span class="n">INT8U</span> <span class="n">ucLogSwitch</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">if</span><span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">strncasecmp</span><span class="p">(</span><span class="n">pszLogType</span><span class="p">,</span> <span class="s">&#34;All&#34;</span><span class="p">,</span> <span class="n">LOG_TYPE_CMP_LEN</span><span class="p">))</span>
    <span class="p">{</span>
        <span class="n">SetGlobalLogCtrl</span><span class="p">(</span><span class="n">LOG_ALL</span><span class="p">,</span> <span class="n">ucLogSwitch</span><span class="p">);</span>
        <span class="k">return</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">INT8U</span> <span class="n">ucIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(</span><span class="n">ucIdx</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="n">ucIdx</span> <span class="o">&lt;</span> <span class="n">ucLogTypeNameNum</span><span class="p">;</span> <span class="n">ucIdx</span><span class="o">++</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="mi">0</span> <span class="o">==</span> <span class="n">strncasecmp</span><span class="p">(</span><span class="n">pszLogType</span><span class="p">,</span> <span class="n">paLogTypeName</span><span class="p">[</span><span class="n">ucIdx</span><span class="p">],</span> <span class="n">LOG_TYPE_CMP_LEN</span><span class="p">))</span>
        <span class="p">{</span>
            <span class="n">SetSpecificLogCtrl</span><span class="p">(</span><span class="n">ucIdx</span><span class="p">,</span> <span class="n">ucLogSwitch</span><span class="p">);</span>
            <span class="n">printf</span><span class="p">(</span><span class="s">&#34;LogType: %s, LogSwitch: %s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span> <span class="n">paLogTypeName</span><span class="p">[</span><span class="n">ucIdx</span><span class="p">],</span>
                   <span class="p">(</span><span class="mi">1</span><span class="o">==</span><span class="n">ucLogSwitch</span><span class="p">)</span><span class="o">?</span><span class="s">&#34;On&#34;</span><span class="o">:</span><span class="s">&#34;Off&#34;</span><span class="p">);</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="n">OmciLogHelp</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><h4 id="掩码表">掩码表</h4>
<p>参见<a href="https://www.cnblogs.com/clover-toeic/p/3732444.html" target="_blank" rel="noopener noreffer">采用掩码方式简化产品国家地区支持能力的表示 - clover_toeic - 博客园</a>一文。该例实现中用到消息、掩码、函数指针等概念。</p>
<h2 id="编程思想">编程思想</h2>
<p>表驱动法属于数据驱动编程的一种，其核心思想在《Unix编程艺术》和《代码大全2》中均有阐述。两者均认为人类阅读复杂数据结构远比复杂的控制流程容易，即<strong>相对于程序逻辑，人类更擅长于处理数据</strong>。本节将由Unix设计原则中的“分离原则”和“表示原则”展开。</p>
<blockquote>
<p><strong>分离原则：策略同机制分离，接口同引擎分离</strong></p>
</blockquote>
<p>机制即提供的功能；策略即如何使用功能。策略的变化要远远快于机制的变化。将两者分离，可以使机制相对保持稳定，而同时支持策略的变化。代码大全中提到“隔离变化”的概念，以及设计模式中提到的将易变化的部分和不易变化的部分分离也是这个思路。</p>
<blockquote>
<p><strong>表示原则：把知识叠入数据以求逻辑质朴而健壮</strong></p>
</blockquote>
<p>即使最简单的程序逻辑让人类来验证也很困难，但就算是很复杂的数据，对人类来说，还是相对容易推导和建模的。数据比编程逻辑更容易驾驭。在复杂数据和复杂代码中选择，宁可选择前者。更进一步，在设计中，应该主动将代码的复杂度转移到数据中去(参考“版本控制”)。</p>
<p>在“消息处理”示例中，每个消息处理的逻辑不变，但消息可能是变化的。将容易变化的消息和不容易变化的查找逻辑分离，即“隔离变化”。此外，该例也体现消息内部的处理逻辑(机制)和不同的消息处理(策略)分离。</p>
<p>数据驱动编程可以应用于：</p>
<ul>
<li>函数级设计，如本文示例。</li>
<li>程序级设计，如用表驱动法实现状态机。</li>
<li>系统级设计，如DSL。</li>
</ul>
<p>注意，数据驱动编程不是全新的编程模型，只是一种设计思路，在Unix/Linux开源社区应用很多。数据驱动编程中，数据不但表示某个对象的状态，实际上还定义程序的流程，这点不同于面向对象设计中的数据“封装”。</p>
<h2 id="附录">附录</h2>
<h3 id="网友观点">网友观点</h3>
<p>(以下观点摘自博客园网友“七心葵”的回帖，非常具有启发性。)</p>
<p>Booch的《面向对象分析与设计》一书中，提到所有的程序设计语言大概有3个源流：结构化编程、面向对象编程、数据驱动编程。我认为数据驱动编程的本质是“参数化抽象”的思想，不同于OO的“规范化抽象”的思想。</p>
<p>数据驱动编程在网络游戏开发过程中很常用，但是少有人专门提到这个词。数据驱动编程有很多名字：元编程，解释器/虚拟机，LOP/微语言/DSL等。包括声明式编程、标记语言、甚至所见即所得的拖放控件，都算是数据驱动编程的一种吧。</p>
<p>数据驱动编程可以帮助处理复杂性，和结构化编程、OO 均可相容。(正交的角度)将变和不变的部分分离，策略和机制分离，由此联想到的还有：(数据和代码的分离，微语言和解释器的分离，被生成代码和代码生成器的分离)；更近一步：(微内核插件式体系结构)。</p>
<p>元编程应该说是更加泛化的数据驱动编程，元编程不是新加入一个间接层，而是退居一步，使得当前的层变成一个间接层。元编程分为静态元编程(编译时)和动态元编程(运行时)，静态元编程本质上是一种代码生成技术或者编译器技术；动态元编程一般通过解释器(或虚拟机)加以实现。</p>
<p>数据驱动编程当然也不应该说是“反抽象的”，但的确与“OO抽象”的思维方式是迥然不同，泾渭分明的，如TAOUP一书中所述：“在Unix的模块化传统和围绕OO语言发展起来的使用模式之间，存在着紧张的对立关系”应该说数据驱动编程的思路与结构化编程和OO是正交的，更类似一种“跳出三界外，不在五行中”的做法。</p>
<h3 id="编程和人的关系">编程和人的关系</h3>
<p>人类心智的限制，一切的背后都有人的因素作为依据：</p>
<ol>
<li>
<p>人同时关注的信息数量：7+-2 (所以要分模块)</p>
</li>
<li>
<p>人接收一组新信息的平均时间5s(所以要简单，系统总的模块数不要太多)</p>
</li>
<li>
<p>人思维的直观性(人的视觉能力和模糊思维能力)，这意味这两点：</p>
<ul>
<li>“直”——更善于思考自己能直接接触把玩的东西；(所以要“浅平透”、使用具象的设计，要尽量代码中只有顺直的流程);</li>
<li>“观”——更善于观图而不是推算逻辑；(所以要表驱动法，数据驱动编程，要UML，要可视化编程——当然MDA是太理想化了)</li>
</ul>
</li>
<li>
<p>人不能持续集中注意力(人在一定的代码行数中产生的bug数量的比例是一定的，所以语言有具有表现力，要体现表达的经济性)，所以要机制与策略分离，要数据和代码分离(数据驱动编程)，要微语言，要DSL，要LOP……</p>
</li>
<li>
<p>人是有创造欲，有现实利益心的(只要偶可能总是不够遵从规范，或想创造规范谋利——只要成本能承受，在硬件领域就不行)</p>
</li>
</ol>
<p>另外，开一个有意思的玩笑，Unix编程艺术艺术的英文缩写为TAOUP，我觉得可以理解为UP之TAO——向上抛出之道——将复杂的易变的逻辑作为数据或更高层代码抛给上层！</p>
<h3 id="函数指针">函数指针</h3>
<p>“消息处理”一节示例中的函数指针有点插件结构的味道。可对这些插件进行方便替换，新增，删除，从而改变程序的行为。而这种改变，对事件处理函数的查找又是隔离的(隔离变化)。</p>
<p>函数指针非常有用，但使用时需注意其缺陷：无法检查参数(parameter)和返回值(return value)的类型。因为函数已经退化成指针，而指针不携带这些类型信息。缺少类型检查，当参数或返回值不一致时，可能会造成严重的错误。</p>
<p>例如，定义三个函数，分别具有两个参数：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> <span class="nf">max</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>  <span class="p">{</span>  <span class="k">return</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">y</span> <span class="o">?</span> <span class="nl">x</span> <span class="p">:</span> <span class="n">y</span><span class="p">;</span>  <span class="p">}</span>
<span class="kt">int</span> <span class="nf">min</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>  <span class="p">{</span>  <span class="k">return</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="n">y</span> <span class="o">?</span> <span class="nl">x</span><span class="p">:</span> <span class="n">y</span><span class="p">;</span>  <span class="p">}</span>
<span class="kt">int</span> <span class="nf">add</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">)</span>  <span class="p">{</span>  <span class="k">return</span> <span class="n">x</span> <span class="o">+</span> <span class="n">y</span><span class="p">;</span>  <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>而处理函数却定义为：</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="kt">int</span> <span class="nf">process</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="p">,</span> <span class="kt">int</span> <span class="n">y</span><span class="p">,</span> <span class="kt">int</span> <span class="p">(</span><span class="o">*</span><span class="n">f</span><span class="p">)())</span>  <span class="p">{</span>  <span class="k">return</span> <span class="p">(</span><span class="o">*</span><span class="n">f</span><span class="p">)(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">);</span>  <span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>其中，第三个参数是一个没有参数且返回int型变量的函数指针。但后面却用<code>process(a,b,max)</code>的方式进行调用，max带有两个参数。若编译器未检查出错误，而又不小心将<code>return (*f)(x,y);</code>写成<code>return (*f)(x);</code>，那么后果可能很严重。</p>
<p>因此在C语言中使用函数指针时，一定要小心<strong>类型陷阱</strong>。</p>
<hr>
<p>注：夹带一些私货，最近上下班会用耳机后台听tinyfool的一些视频，下面这个是关于学习曲线和规律的，启发比较大。如果要成为一个高手，需要在某个领域有一个合理的学习曲线（视频中所说的乐学者的学习曲线），认真练习和总结，持续学习，总会有所小成。因为这个讲座，最近开始阅读之前买了一直没看的《思考，快与慢》和《异类》这两本书，等读完了写个读书笔记。视频见下方</p>
<div class="bilibili"><iframe src="//player.bilibili.com/player.html?bvid=BV1uU4y147Zi&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"></iframe></div>

<hr>
<figure>
     <figcaption>
            <h4>欢迎扫码关注我的公众号</h4>
        </figcaption>
</figure>]]></description>
</item></channel>
</rss>
