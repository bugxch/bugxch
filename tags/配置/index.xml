<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>配置 - 标签 - 致力于把技术要点写清楚</title>
        <link>https://bugxch.github.io/tags/%E9%85%8D%E7%BD%AE/</link>
        <description>配置 - 标签 - 致力于把技术要点写清楚</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>bugxch@126.com (bugxch)</managingEditor>
            <webMaster>bugxch@126.com (bugxch)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 20 Jul 2018 23:08:38 &#43;0000</lastBuildDate><atom:link href="https://bugxch.github.io/tags/%E9%85%8D%E7%BD%AE/" rel="self" type="application/rss+xml" /><item>
    <title>Source Insight 基础配置</title>
    <link>https://bugxch.github.io/source-insight-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</link>
    <pubDate>Fri, 20 Jul 2018 23:08:38 &#43;0000</pubDate><author>
        <name>bugxch</name>
    </author><guid>https://bugxch.github.io/source-insight-%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/</guid>
    <description><![CDATA[<p>我们提交的代码，要求不能有多余的空格与 TAB 键，而且代码是在 linux 环境中编译和运行的，而我们经常使用 source insight 编辑代码，因此有必要针对性地配置以省去反复去掉空格和 TAB 键的麻烦。</p>
<p></p>
<p>我们的配置基本上都在 Preference 的菜单里，下面逐个介绍如何设置。</p>
<h3 id="处理-tab-和空格">处理 TAB 和空格</h3>
<ul>
<li><strong>去掉每行末尾的空格和 TAB 键</strong>：设置<code>Options-&gt;Perferences-&gt;Files-&gt; Remove extra white space when saving</code>。</li>
<li><strong>TAB 键可见</strong>：设置<code>Options-&gt;Document Options-&gt;Editing Options-&gt;Visible tabs</code>，就可以在代码里面看到 TAB 键。</li>
</ul>
<h3 id="处理换行键">处理换行键</h3>
<p>*nix 系统和 Windows 系统文件中的换行符不同。</p>
<ol>
<li>*nix 系统中的换行符只有一个字符，<code>\n</code>；</li>
<li>Windows 系统中的换行由两个字符组成，<code>\r\n</code>；</li>
</ol>
<p>这种区别的影响包括</p>
<ol>
<li>Unix/Mac 系统下的文件在 Windows 里打开的话，所有文字会变成一行；</li>
<li>Windows 里的文件在 Unix/Mac 下打开的话，在每行的结尾可能会多出一个 ^M 符号。</li>
<li>Linux 保存的文件在 windows 上用记事本看的话会出现黑点。</li>
</ol>
<p>在 linux 下，可以使用命令<code>unix2dos</code>把 linux 文件格式转换成 windows 文件格式，命令<code>dos2unix</code>把 windows 格式转换成 linux 文件格式。</p>
<p>为了保证在 Windows 环境下打开文件之后仍然保持 linxu 的文件的显示正确，设置<code>Preference-&gt;Other-&gt;Default file format</code>为 Unix(LF)。</p>
<h3 id="标题栏显示文件完整路径">标题栏显示文件完整路径</h3>
<p>这个功能在查看文档路径是非常有用，去掉<code>Preference-&gt;Display-&gt;Options-&gt;Trim long path names while elipses</code>。</p>
<h3 id="文件名首字母不要大写">文件名首字母不要大写</h3>
<p>勾选<code>Preference-&gt;Display-&gt;Options-&gt;Show exact case of file names</code>。</p>
<h3 id="其他设置">其他设置</h3>
<p>将 Preference 下面的所有 tab 页都过一遍。</p>
<h4 id="general">General</h4>
<ul>
<li><code>Project File Synchronization-&gt;Remove missing file from project</code>选上可以避免因文件找不到而弹出错误对话框；</li>
<li>把<code>Misc-&gt;Use stricter confirmation dialog</code>选项去掉可以使确认时不输入”yes”。</li>
</ul>
<h4 id="typing">Typing</h4>
<ul>
<li>
<p><code>ource Editing-&gt;Indent commands affect #-preprocessor statements</code>去掉后（默认值），进行多行缩进时不会影响预处理语句（如 #if…#endif）。</p>
</li>
<li>
<p><code>Auto Completion-&gt;Use detailed completion window</code>，选上后，联想时可以出现该函数的详细信息 。</p>
</li>
<li>
<p><code>Auto Completion-&gt;Insert paremeters for functions</code>，去掉后，自动联想不会把整个参数都输出到当前行。</p>
</li>
<li>
<p><code>Browsing in Lists-&gt;Match syllables while typing(slower)</code>在 symbol list 框检索符号时是否采用音节匹配方式，如对于函数 FindNext，输入 find 或者 next 都可以找到该函数。该功能可能导致反应缓慢（视工程和机器配置而定），建议关闭，因为即使在关闭状态下也可以通过先输入空格再输入单词来动态启用该功能。</p>
<p>注意 Browsing in Lists 里其实有两个功能，但一般我们只能看到 Match syllables while typing 这一条，应该是 si 的菜单设计没有做好，导致在中文 windows 下不能显示全，另一个功能是 Match members while typing，用于打开 / 关闭按成员变量名来检索类 / 结构体的功能。</p>
</li>
</ul>
<h4 id="files">Files</h4>
<ul>
<li><code>Opening Files-&gt;Sharing: Let other programs modify files</code>，以共享方式打开文件，这个很重要，保证可以在其它编辑中同时编辑该文件。典型的场景就是用 ide 环境去动态编译调试，而用 si 静态阅读；</li>
<li><code>Customize 'Open' Command...</code>，用于设置 Ctrl+O 打开的页面，默认选项是 Project File list view in Project Window，建议保持默认。</li>
<li><code>Saving Files-&gt;Preserve Undo data and revision marks after saving</code>，如果发现保存后就不能 undo 了，请检查该选项是否选中。</li>
<li><code>Remove extra white space when saving</code>。保存时自动去除每行尾部的空格和 tab。建议选中。</li>
</ul>
<h4 id="languages">Languages</h4>
<p>自定义其它编程语言的语法解析，这个… 还是另写一篇来讲吧。</p>
<ul>
<li>
<p><code>Conditional Parsing</code>不要错过了，这里的 Conditions 功能实在让人喜欢。Conditions 是什么意思呢？我们的代码中一般都会有一些开关宏，通过在 Conditions 中配置这些宏的默认值，可以让 si 把配置为不开启的宏视为无效代码，从而不进行符号检索。</p>
<p>如果源代码中的开关宏太多，还可以使用 Condition Parsing 中的 Scan Files 来自动找出所有开关宏。</p>
</li>
</ul>
<h4 id="symbol-lookups">Symbol Lookups</h4>
<p>没有特别的。</p>
<h4 id="display">Display</h4>
<ul>
<li>显示配置和个人喜好和显示器的状态有关，偶用的 x60 小本，屏幕资源有限，所以在 Display Elements 里把 Project Window, Status Bar, Tool Bar，Clip Window 都关了，基本用快捷键可以代替它们。</li>
<li><code>Options-&gt;Horizontal scroll bars for each new window</code>。很多大师都教导我们说一行不要写太多代码。在这个指导思想下，我们不需要这个东东。</li>
<li><code>Show exact case of file names</code>。如果看不惯 si 把所有的文件名首字母都大写就勾上这个选项吧。</li>
<li><code>Tile source and destination windows for Source Link commands</code>。Source Link 很多时候用于外部命令输出结果的解析（如 Make, lint），这个功能会把解析结果与目标窗口自动 tile，很实用。</li>
<li><code>Trim long path names with ellipses</code>。这个建议不要选中。事实上这个主要影响标题栏，但一般来说标题栏上的空间是充裕的，选上之后往往会令我们不知道所编辑文件的具体位置。</li>
</ul>
<h4 id="color">Color</h4>
<p>自己配置。</p>
<h4 id="syntax-decorations"><strong>Syntax Decorations</strong></h4>
<ul>
<li>可以把一些符号转换成特殊形式显示，如 -&gt; 转换成→。如果要使用该功能，不能开启<code>Syntax Formatting-&gt;Basics-&gt;Use only color formatting</code>。</li>
<li><code>Auto annotations</code>下的三个功能都比较有用;</li>
<li><code>Show arrows at goto statements</code>可以在 goto 时显示一个向上或向下的箭头，表示是向上 goto 还是向下 goto，不过我们还是尽量不要用 goto 了。</li>
<li><code>Annotate closing braces with end-statement</code>。在”}” 后显示标识，表示该”}” 与哪个 if/switch 配对，而下面的<code>Annotate closing braces only for long blocks</code>则是一个补充选项，表示只在较长的语句块时才显示标识。</li>
</ul>
<h4 id="syntax-formatting">Syntax Formatting</h4>
<p>如果让大家说出喜欢 si 的几个理由，我想语法着色一定会是其中之一。</p>
<ul>
<li><code>Basics-&gt;Use only color formatting</code>。只启用 style 中关于颜色的设置。其它如粗体、斜体、阴影等都不启用。</li>
<li><code>Apply Styles for Lanugage Elements</code>。把分类启用 style，都选上吧。</li>
<li><code>Symbol Reference Lookups-&gt;Qualify references to members</code>。检测成员的有效性，如果不是类 / 结构体中的一部分，则不启用 style。虽然可能导致性能降低，但还是建议打开。同样<code>Qualify references to functions</code>也是。</li>
<li>这里有个按钮可以进入 Doc Types 页面（Options 菜单也可以进入），里面有很多重要选项：
<ul>
<li><code>Editing Options</code>中， <code>Expand tabs, Visible tabs</code>可以帮助我们发现并转换 tab。</li>
<li><code>Show right margint和Margin width</code>可以提醒我们是否把一行写得太长。</li>
<li><code>Symbol Window</code>选项建议关闭（因为有快捷键）。</li>
<li><code>Auto Indent</code>对话框中， 如果没有特别喜好，建议把<code>Smart Indent Options</code>的两个勾都去掉，同时<code>Auto Indent Type</code>选<code>Smart</code>。</li>
</ul>
</li>
</ul>
<p>其他的没有什么特别的了，最后简单说下 si 的配置文件。可以通过<code>Options-&gt;Load Configuration/Save Configuration</code>来导入 / 导出配置，可以导出全部，也可以导出某几个部分（如 style）。si 的配置有两级，一是全局配置，一是项目配置。出入方便考虑，统一一个配置就好了，在创建项目时选择用全局配置（默认值）。</p>
<h3 id="参考文档">参考文档</h3>
<ul>
<li><a href="https://blog.csdn.net/TskyFree/article/details/8121951" target="_blank" rel="noopener noreffer">Windows、Unix、Mac 不同操作系统的换行问题 - 剖析回车符 \ r 和换行符 \ n - CSDN 博客</a></li>
<li><a href="https://blog.csdn.net/lanmanck/article/details/8638391" target="_blank" rel="noopener noreffer">source insight 保存时删除多余空格，去除多余空格 space tab 键 - CSDN 博客</a></li>
</ul>]]></description>
</item></channel>
</rss>
