<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>algorithm - 标签 - Dive Into Think</title>
        <link>https://bugxch.github.io/tags/algorithm/</link>
        <description>algorithm - 标签 - Dive Into Think</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>bugxch@126.com (bugxch)</managingEditor>
            <webMaster>bugxch@126.com (bugxch)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 06 May 2021 22:33:59 &#43;0800</lastBuildDate><atom:link href="https://bugxch.github.io/tags/algorithm/" rel="self" type="application/rss+xml" /><item>
    <title>二分搜索——从入门到精通</title>
    <link>https://bugxch.github.io/binary_search/</link>
    <pubDate>Thu, 06 May 2021 22:33:59 &#43;0800</pubDate>
    <author>bugxch</author>
    <guid>https://bugxch.github.io/binary_search/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://pic.imgdb.cn/item/60940147d1a9ae528fdc3a1d.png" referrerpolicy="no-referrer">
            </div><p>最近在准备考试，做了一些二分搜索的题目，感觉有点意思，记录下做题的心得。</p>
<h2 id="文章目标">文章目标</h2>
<p>通过阅读本文，可以彻底搞懂二分查找的基本原理及各种变体，可以独立完成下面的力扣题目</p>
<table>
<thead>
<tr>
<th>力扣题目</th>
<th>考查点</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower/" target="_blank" rel="noopener noreffer">374. 猜数字大小</a></td>
<td>基本模板</td>
</tr>
<tr>
<td><a href="https://leetcode-cn.com/problems/sqrtx/" target="_blank" rel="noopener noreffer">69. x 的平方根</a></td>
<td>基本模板</td>
</tr>
<tr>
<td><a href="https://leetcode-cn.com/problems/first-bad-version/?utm_source=LCUS&amp;utm_medium=ip_redirect&amp;utm_campaign=transfer2china" target="_blank" rel="noopener noreffer">278. 第一个错误的版本</a></td>
<td>查找左边界</td>
</tr>
<tr>
<td><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/" target="_blank" rel="noopener noreffer">153. 寻找旋转排序数组中的最小值</a></td>
<td>寻找旋转数组中的目标值（无重复元素）</td>
</tr>
<tr>
<td><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/" target="_blank" rel="noopener noreffer">154. 寻找旋转排序数组中的最小值 II</a></td>
<td>寻找旋转数组中的目标值（包含重复元素）</td>
</tr>
<tr>
<td><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener noreffer">34. 在排序数组中查找元素的第一个和最后一个位置</a></td>
<td>查找左右边界</td>
</tr>
</tbody>
</table>
<h2 id="基本原理">基本原理</h2>
<p>在计算机科学中，二分搜索又被成为<strong>半区间</strong>搜索，对数搜索或者二分chop，它用于在排序数列中找到目标值的位置。算法不断比较数列中间元素与目标值，</p>
<ol>
<li>如果目标值与中间元素匹配，那直接返回中间的位置；</li>
<li>如果目标值比中间元素小，继续搜索低半边的数列；</li>
<li>如果目标值比中间元素大，那么继续搜索高半边</li>
</ol>
<p>注意到<strong>每次在比较元素之后搜索的区间会减少一半（去掉目标值不可能在的那一半区间）</strong>，所以在最坏的情况下，算法的复杂度是$O(logn)$。下面是二分搜索与线性搜索的比较示意图，在同一个排序的数列上，查找目标值为37的序列值。</p>
<p></p>
<p>序列长度是17，</p>
<ol>
<li>二分查找第一次寻找整个搜索区间的中间的index（从0开始计数）为(0 + 16) / 2 = 8的数字23，23比37小，所以<strong>更新查找区间为</strong>[9,16]；</li>
<li>查找新区间的中间index = (9 + 16) /2 = 12，结果是数字41，比37大，<strong>更新查找区间</strong>为[9, 11];</li>
<li>查找新区间的中间index = (9 + 11) / 2 = 10，结果是数字31，比37大，继续<strong>更新查找区间</strong>为[11, 11]，此时中间元素就是第11号元素，即37，找到目标值，查找结束。</li>
</ol>
<p>根据以上算法步骤，很顺利就可以写出下面的伪代码，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">// basic template
<span class="k">function</span> binary_search<span class="o">(</span>A, n, T<span class="o">)</span> is
    L :<span class="o">=</span> <span class="m">0</span>
    R :<span class="o">=</span> n − <span class="m">1</span>
    <span class="k">while</span> L ≤ R <span class="k">do</span>
        m :<span class="o">=</span> floor<span class="o">((</span>L + R<span class="o">)</span> / 2<span class="o">)</span>
        <span class="k">if</span> A<span class="o">[</span>m<span class="o">]</span> &lt; T <span class="k">then</span>
            L :<span class="o">=</span> m + <span class="m">1</span>
        <span class="k">else</span> <span class="k">if</span> A<span class="o">[</span>m<span class="o">]</span> &gt; T <span class="k">then</span>
            R :<span class="o">=</span> m − <span class="m">1</span>
        <span class="k">else</span>:
            <span class="k">return</span> m
    <span class="k">return</span> unsuccessful
</code></pre></td></tr></table>
</div>
</div><p>使用上面的基本模板我们就可以解答文章开始列出的第一道题目了，<a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower/" target="_blank" rel="noopener noreffer">374. 猜数字大小</a>题目，给出二分查找的基本模板。这道题目就是最传统的猜大小的谜题，标准的解答模板的代码如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cm">/**
</span><span class="cm"> * Forward declaration of guess API.
</span><span class="cm"> * @param  num   your guess
</span><span class="cm"> * @return 	     -1 if num is lower than the guess number
</span><span class="cm"> *			      1 if num is higher than the guess number
</span><span class="cm"> *               otherwise return 0
</span><span class="cm"> * int guess(int num);
</span><span class="cm"> */</span>

<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">guessNumber</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>

        <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// detail 1
</span><span class="c1"></span>            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">((</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// detail 2
</span><span class="c1"></span>            <span class="kt">int</span> <span class="n">rlt</span> <span class="o">=</span> <span class="n">guess</span><span class="p">(</span><span class="n">mid</span><span class="p">);</span>
		
            <span class="k">if</span> <span class="p">(</span><span class="n">rlt</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="n">mid</span><span class="p">;</span>
            <span class="p">}</span>
			<span class="c1">// detail 3
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">rlt</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>  <span class="k">else</span> <span class="p">{</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="关键技术细节">关键技术细节</h3>
<blockquote>
<p><em>Although the basic idea of binary search is comparatively straightforward, the details can be surprisingly tricky</em>  &ndash; <strong>Donald Knuth</strong></p>
</blockquote>
<p>就像高德纳所说，二分法的思想简单且易于理解，但是二分法的细节却藏了很多坑，<strong>魔鬼就在细节中</strong>。为了透彻理解二分法的实现，有必要对上面的代码的下面3个技术细节（标记为<code>detail</code>注释的地方）进行深究。</p>
<h4 id="循环的入口条件">循环的入口条件</h4>
<p>代码16行，为什么循环的入口条件是<code>left &lt;= right</code>？</p>
<blockquote>
<p>无论何时$[left, right]$表示<strong>可能包含目标值</strong>的搜索区间</p>
</blockquote>
<p>注意这是个<strong>左闭右闭</strong>的闭区间，单纯从数学角度出发，这个区间<strong>最短的长度就是1</strong>，也就是$left = right$的时候。如果$left &gt;  right$了，那$[left, right]$就是<strong>空集</strong>，这个集合<strong>肯定不包含目标值</strong>，也就<strong>没有继续搜索的必要</strong>了，所以循环退出。</p>
<h4 id="中点位置">中点位置</h4>
<p>为什么是<code>mid = left + ((right - left) &gt;&gt; 1)</code>，也就是数学的$floor((left + right) / 2)$?
这里的中点转换成数学表示就是
$$
\begin{align}
mid = \left \lfloor\frac{left + right}{2}  \right \rfloor
\end{align}
$$
其实，我们还有另外一种选择，将中间值定为
$$
\begin{align}
mid = \left \lceil\frac{left + right}{2}  \right \rceil
\end{align}
$$
第2种方式的中点值的选择是否可行？从后面的分析，**其实是可行的。**那这两个计算公式有什么区别？最大的区别在于$right = left + 1$的时候，也就是搜索区间长度为2左右端点挨着的时候，如下图所示，下一次循环计算mid，第1个公式结果是$mid = 4$，而第2个公式的结果是$mid = 5$，</p>
<p></p>
<p>，第1个公式$mid = \left \lfloor\frac{left + right}{2}  \right \rfloor = \left \lfloor\frac{left + left + 1}{2}  \right \rfloor = left$，而第2个公式$mid = \left \lceil\frac{left + right}{2}  \right \rceil = \left \lceil\frac{left + left + 1}{2}  \right \rceil = left + \lceil 0.5\rceil = left + 1 = right$，请记住这个重要的结论。</p>
<blockquote>
<p>当搜索区间的<strong>左右两端点挨着</strong>的时候（即$right = left + 1)$，floor函数计算的中点mid是left，ceil函数计算的中点mid是right</p>
</blockquote>
<p>请记住这个<strong>特殊的区间情况</strong>，至于为何基础模板选择floor而没有选择ceil，在后面的变化类型一节很关键。</p>
<h4 id="搜索区间调整">搜索区间调整</h4>
<p>在每次判断与target的差距之后，搜索区间为什么是这么调整的？
二分法另一个容易搞错的问题是区间调整，$left$和$right$好像可以选择$mid$的3个边界值$mid, mid - 1, mid + 1$中的任意一个，其实<strong>调整的原则</strong>很简单，</p>
<blockquote>
<ol>
<li><strong>排除</strong>target不可能存在的区间，<strong>保留</strong>可能存在的区间</li>
<li>结合中点函数的计算原则，需要保证<strong>任意判断分支为true时最后都可以跳出循环，尤其当$right = left + 1$时</strong></li>
</ol>
</blockquote>
<p><strong>第2条简直就是区间调整和中点选择的试金石</strong>。基础模板中，根据mid的值与目标值的差距，搜索区间$[left, right]$的调整有3个判断分支：</p>
<ol>
<li>如果和目标值相同$A[mid] = A[target]$，直接<strong>跳出循环</strong>，返回mid(代码第21行)；</li>
<li>如果比目标值大$A[mid] &gt; A[target]$，更新$right = mid - 1$，搜索区间长度进一步减少；</li>
<li>如果比目标值小$A[mid] &lt; A[target]$，更新$left = mid + 1$，搜索区间长度进一步减少</li>
</ol>
<p>分支3的调整情况，看如下图示</p>
<p></p>
<p>因为我们查找的是一个严格单增的序列，所以如果mid的值比target小，那么可以肯定</p>
<ol>
<li>很显然，target必然不在左半边$[left, mid - 1]$上，所以<strong>排除这个不可能的区间</strong>，包含target的区间变成$[mid, right]$；</li>
<li>新搜索区间不包含mid，因为$A[mid] &lt; A[target]$，而且是严格单增函数，所以$mid &lt; target$，所以$mid$必然不是$target$，区间进一步缩小为$[mid + 1, right]$。</li>
</ol>
<p>分支2情况的调整策略与分支3的同理，此处不再赘述。需要注意，这样的策略<strong>是否可以退出循环</strong>？这个循环的退出条件是$left &gt; right$。对照上面的3个判断分支分别为true的情况：</p>
<ol>
<li>第1个判断分支直接退出循环，符合条件；</li>
<li>同理，第2个判断分支每次判断之后$right$在变小，所以必然在若干次之后比$left$小，直至退出循环</li>
<li>第3个判断分支每次调整之后$left$在变大，所以所以必然在若干次之后比$right$大，直至退出循环</li>
</ol>
<p>所以随着区间的调整，必然会在某一步满足退出的条件。<strong>特别的</strong>，当$right = left + 1$时，$mid = left$；</p>
<ul>
<li>第2个判断分支，$right = mid - 1 = left - 1 = right - 2 &lt; left = right - 1$，跳出循环</li>
<li>第3个判断分支，$left = mid + 1 = left + 1 = right$，再次进入循环，此时$mid = left = right$，$left = mid + 1 = right + 1 &gt; right$，可以看到在迭代2次之后也退出循环</li>
</ul>
<p>满足上面的条件2。</p>
<hr>
<p>结合上面的分析，按照如下的步骤写出二分查找，判断$A[mid]$与$A[target]$大小的3种情况，确定每个分支的区间调整策略，结合中点的计算规则，满足如下2个条件，</p>
<blockquote>
<ol>
<li><strong>排除</strong>target不可能存在的区间，<strong>保留</strong>可能存在的区间</li>
<li>结合中点函数的计算原则，需要保证<strong>任意判断分支为true时最后都可以跳出循环，尤其当$right = left + 1$时</strong></li>
</ol>
</blockquote>
<h3 id="深入探究">深入探究</h3>
<h4 id="分支合并">分支合并</h4>
<p>当前的基础代码有3个判断分支，是否可以将3个分支合并成2个呢？下面的基础模板就可以。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">guessNumber</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>

        <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 退出条件变了
</span><span class="c1"></span>            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">((</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
            <span class="c1">// 调整策略的分支从3个变成了2个
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">guess</span><span class="p">(</span><span class="n">mid</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
		<span class="c1">// 返回的条件也变了
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">guess</span><span class="p">(</span><span class="n">left</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">left</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>再仔细考察一下，上面的代码，3个地方发生变化（已经在注释种标出）依然可以通过测试，其实还是按照上面的3个原则来看。</p>
<ol>
<li>
<p>每次调整区间，<strong>排除</strong>target不可能存在的区间，<strong>保留</strong>可能存在的区间</p>
<p>重新分析之前的3个判断分支，比较特殊是第1点，如果$A[mid] = A[target]$，那么$mid = target$，很明显</p>
<ul>
<li>判断分支1与判断分支2合并，当$A[mid] \ge A[target]$，$target \le mid$，所以$target$<strong>可能位于</strong>$[left, mid]$区间，调整$right = mid$，注意此处$right \ne mid -1$</li>
<li>判断分支1与判断分支3合并，当$A[mid] \le A[target]$，$target \ge mid$，所以$target$<strong>可能位于</strong>$[mid, right]$区间，调整$left = mid$，注意此处$left \ne mid +1$</li>
</ul>
<p>这两个策略看起来似乎都可以，结合其他两种情况，如果将3个分支合并为2个，应该有2种调整策略</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># solution 1，另一种正确的方案</span>
<span class="k">function</span> binary_search_alternative<span class="o">(</span>A, n, T<span class="o">)</span> is
    L :<span class="o">=</span> <span class="m">0</span>
    R :<span class="o">=</span> n − <span class="m">1</span>
    <span class="k">while</span> L &lt; R <span class="k">do</span>
        m :<span class="o">=</span> floor<span class="o">((</span>L + R<span class="o">)</span> / 2<span class="o">)</span>
        <span class="k">if</span> A<span class="o">[</span>m<span class="o">]</span> &gt;<span class="o">=</span> T <span class="k">then</span>
            R :<span class="o">=</span> m
        <span class="k">else</span>:
            L :<span class="o">=</span> m + <span class="m">1</span>
    <span class="k">if</span> A<span class="o">[</span>L<span class="o">]</span> <span class="o">=</span> T <span class="k">then</span>
        <span class="k">return</span> L
    <span class="k">return</span> unsuccessful
</code></pre></td></tr></table>
</div>
</div><p>或者</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># solution 2，错误示范</span>
<span class="k">function</span> binary_search_alternative<span class="o">(</span>A, n, T<span class="o">)</span> is
    L :<span class="o">=</span> <span class="m">0</span>
    R :<span class="o">=</span> n − <span class="m">1</span>
    <span class="k">while</span> L &lt; R <span class="k">do</span>
        m :<span class="o">=</span> floor<span class="o">((</span>L + R<span class="o">)</span> / 2<span class="o">)</span>
        <span class="k">if</span> A<span class="o">[</span>m<span class="o">]</span> &lt;<span class="o">=</span> T <span class="k">then</span>
            L :<span class="o">=</span> m
        <span class="k">else</span>:
            R :<span class="o">=</span> m - <span class="m">1</span>
    <span class="k">if</span> A<span class="o">[</span>L<span class="o">]</span> <span class="o">=</span> T <span class="k">then</span>
        <span class="k">return</span> L
    <span class="k">return</span> unsuccessful
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>结合中点函数的计算原则，需要保证<strong>任意判断分支为true时最后都可以跳出循环，尤其当$right = left + 1$时</strong></p>
<p>我们再看上面的两种伪代码，退出的条件是$left &gt;= right$，直接考察$left = right -1$的情况，如果在搜索的若干步之后搜索的区间变成下面的情况</p>
<p></p>
<p>下一步搜索的$mid = 4$，按照方案2，如果此时</p>
<ol>
<li>第2个判断分支为true，$right = mid - 1 = 3 &lt; left$，退出循环；</li>
<li>第1个判断分支为true（代码第7~8行），那么调整$left = mid = 4$，再次进入之后<strong>会发现陷入死循环</strong>，核心原因在于中点的选择上，因为使用的是floor函数，导致left永远恒等于mid，换句或说，$left$永远不再增加，而且也进不到更新$right$的分支，陷入死循环，考察方案1就没有这种情况。那如果是这样，我们改造下方案2，将中点的函数选成ceil是不是就ok了？</li>
</ol>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># solution 3，solution 2的改造</span>
<span class="k">function</span> binary_search_alternative<span class="o">(</span>A, n, T<span class="o">)</span> is
    L :<span class="o">=</span> <span class="m">0</span>
    R :<span class="o">=</span> n − <span class="m">1</span>
    <span class="k">while</span> L &lt; R <span class="k">do</span>
        m :<span class="o">=</span> ceil<span class="o">((</span>L + R<span class="o">)</span> / 2<span class="o">)</span> <span class="c1"># ceil取代floor函数</span>
        <span class="k">if</span> A<span class="o">[</span>m<span class="o">]</span> &lt;<span class="o">=</span> T <span class="k">then</span>
            L :<span class="o">=</span> m
        <span class="k">else</span>:
            R :<span class="o">=</span> m - <span class="m">1</span>
    <span class="k">if</span> A<span class="o">[</span>L<span class="o">]</span> <span class="o">=</span> T <span class="k">then</span>
        <span class="k">return</span> L
    <span class="k">return</span> unsuccessful
</code></pre></td></tr></table>
</div>
</div><p>再考察一下上面的搜索区间左右端点相邻的情况，下一次搜索的$mid = 5$，无论走哪一个判断分支，最终$left = right$，跳出循环，所以</p>
<blockquote>
<p>中点的选择需要结合区间调整的策略来看，保证无论哪个分支为true<strong>都不能出现死循环</strong></p>
</blockquote>
</li>
</ol>
<h4 id="判断条件变更">判断条件变更</h4>
<p>需要注意，其他2个的模板的循环条件为$left &lt; right$，当前$left &lt;= right$时退出，如果$left = right$，那么搜索的区间只剩下一个元素，说明其他的元素不符合条件。如果最后的这个元素依然不是target，那么所有的元素也不是了,所以在最后我们加了一个判断，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">    <span class="k">if</span> A<span class="o">[</span>L<span class="o">]</span> <span class="o">=</span> T <span class="k">then</span>
        <span class="k">return</span> L
    <span class="k">return</span> unsuccessful
</code></pre></td></tr></table>
</div>
</div><h2 id="变种题目">变种题目</h2>
<p>理解上面的分析过程之后，进入进阶版的二分法题目。</p>
<h3 id="重复元素左边界">重复元素左边界</h3>
<p>参考<a href="https://leetcode-cn.com/problems/first-bad-version/?utm_source=LCUS&amp;utm_medium=ip_redirect&amp;utm_campaign=transfer2china" target="_blank" rel="noopener noreffer">278. 第一个错误的版本</a>，从某个版本开始，版本就已经不可用了，但是在这个版本之前，所有的版本均可用，需要找出第一个不可用的版本。假如说，我们有100个版本，从第70个版本开始不用，那么怎么快速找到70呢？如下所示</p>
<p></p>
<p>题目要找到最左边第一个true对应的下标70。</p>
<h3 id="重复元素右边界">重复元素右边界</h3>
<h3 id="旋转数组无重复元素">旋转数组（无重复元素）</h3>
<h3 id="旋转数组-包含重复元素左边界">旋转数组（ 包含重复元素）左边界</h3>
<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="https://segmentfault.com/a/1190000016825704" target="_blank" rel="noopener noreffer">二分查找、二分边界查找算法的模板代码总结 - SegmentFault 思否</a>，给我很多启发的一篇文章</li>
<li><a href="https://en.wikipedia.org/wiki/Binary_search_algorithm" target="_blank" rel="noopener noreffer">Binary search algorithm</a>，维基百科页面，英文版里面的内容很详尽</li>
</ol>
<hr>
<figure><figcaption>
            <h4>欢迎扫码关注我的公众号</h4>
        </figcaption>
</figure>]]></description>
</item></channel>
</rss>
