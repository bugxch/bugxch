<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>algorithm - 标签 - 致力于把技术要点写清楚</title>
        <link>https://bugxch.github.io/tags/algorithm/</link>
        <description>algorithm - 标签 - 致力于把技术要点写清楚</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>bugxch@126.com (bugxch)</managingEditor>
            <webMaster>bugxch@126.com (bugxch)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 06 May 2021 22:33:59 &#43;0800</lastBuildDate><atom:link href="https://bugxch.github.io/tags/algorithm/" rel="self" type="application/rss+xml" /><item>
    <title>二分搜索——从入门到精通</title>
    <link>https://bugxch.github.io/binary_search/</link>
    <pubDate>Thu, 06 May 2021 22:33:59 &#43;0800</pubDate>
    <author>bugxch</author>
    <guid>https://bugxch.github.io/binary_search/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://pic.imgdb.cn/item/60940147d1a9ae528fdc3a1d.png" referrerpolicy="no-referrer">
            </div><p>最近在准备考试，做了一些二分搜索的题目，感觉有点意思，记录下做题的心得😁。</p>
<h2 id="文章目标">文章目标</h2>
<p>通过阅读本文，可以彻底搞懂二分查找的基本原理及各种变体，可以独立完成下面的力扣题目</p>
<table>
<thead>
<tr>
<th>力扣题目</th>
<th>考查点</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower/" target="_blank" rel="noopener noreffer">374. 猜数字大小</a></td>
<td>基本模板</td>
</tr>
<tr>
<td><a href="https://leetcode-cn.com/problems/sqrtx/" target="_blank" rel="noopener noreffer">69. x 的平方根</a></td>
<td>基本模板</td>
</tr>
<tr>
<td><a href="https://leetcode-cn.com/problems/first-bad-version/?utm_source=LCUS&amp;utm_medium=ip_redirect&amp;utm_campaign=transfer2china" target="_blank" rel="noopener noreffer">278. 第一个错误的版本</a></td>
<td>查找左边界</td>
</tr>
<tr>
<td><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/" target="_blank" rel="noopener noreffer">153. 寻找旋转排序数组中的最小值</a></td>
<td>寻找旋转数组中的目标值（无重复元素）</td>
</tr>
<tr>
<td><a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/" target="_blank" rel="noopener noreffer">154. 寻找旋转排序数组中的最小值 II</a></td>
<td>寻找旋转数组中的目标值（包含重复元素）</td>
</tr>
<tr>
<td><a href="https://leetcode-cn.com/problems/find-first-and-last-position-of-element-in-sorted-array/" target="_blank" rel="noopener noreffer">34. 在排序数组中查找元素的第一个和最后一个位置</a></td>
<td>查找左右边界</td>
</tr>
</tbody>
</table>
<h2 id="基本原理">基本原理</h2>
<p>在计算机科学中，二分搜索又被成为<strong>半区间</strong>搜索，对数搜索或者二分chop，它用于在排序数列中找到目标值的位置。算法不断比较数列中间元素与目标值，</p>
<ol>
<li>如果目标值与中间元素匹配，那直接返回中间的位置；</li>
<li>如果目标值比中间元素小，继续搜索低半边的数列；</li>
<li>如果目标值比中间元素大，那么继续搜索高半边</li>
</ol>
<p>注意到<strong>每次在比较元素之后搜索的区间会减少一半（去掉目标值不可能在的那一半区间）</strong>，所以在最坏的情况下，算法的复杂度是$O(logn)$。下面是二分搜索与线性搜索的比较示意图，以<strong>严格单调增且无重复元素</strong>的序列为例，查找目标值为37的序列值。</p>
<p></p>
<p>序列长度是17，</p>
<ol>
<li>二分查找第一次寻找整个搜索区间的中间的index（从0开始计数）为(0 + 16) / 2 = 8的数字23，23比37小，所以<strong>更新查找区间为</strong>[9,16]；</li>
<li>查找新区间的中间index = (9 + 16) /2 = 12，结果是数字41，比37大，<strong>更新查找区间</strong>为[9, 11];</li>
<li>查找新区间的中间index = (9 + 11) / 2 = 10，结果是数字31，比37大，继续<strong>更新查找区间</strong>为[11, 11]，此时中间元素就是第11号元素，即37，找到目标值，查找结束。</li>
</ol>
<p>根据以上算法步骤，很顺利就可以写出下面的伪代码，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">// basic template
<span class="k">function</span> binary_search<span class="o">(</span>A, n, T<span class="o">)</span> is
    L :<span class="o">=</span> <span class="m">0</span>
    R :<span class="o">=</span> n − <span class="m">1</span>
    <span class="k">while</span> L ≤ R <span class="k">do</span>
        m :<span class="o">=</span> floor<span class="o">((</span>L + R<span class="o">)</span> / 2<span class="o">)</span>
        <span class="k">if</span> A<span class="o">[</span>m<span class="o">]</span> &lt; T <span class="k">then</span>
            L :<span class="o">=</span> m + <span class="m">1</span>
        <span class="k">else</span> <span class="k">if</span> A<span class="o">[</span>m<span class="o">]</span> &gt; T <span class="k">then</span>
            R :<span class="o">=</span> m − <span class="m">1</span>
        <span class="k">else</span>:
            <span class="k">return</span> m
    <span class="k">return</span> unsuccessful
</code></pre></td></tr></table>
</div>
</div><p>使用上面的基本模板我们就可以解答文章开始列出的第一道题目了，<a href="https://leetcode-cn.com/problems/guess-number-higher-or-lower/" target="_blank" rel="noopener noreffer">374. 猜数字大小</a>题目，给出二分查找的基本模板。这道题目就是最传统的猜大小的谜题，标准的解答模板的代码如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span><span class="lnt">30
</span><span class="lnt">31
</span><span class="lnt">32
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="cm">/**
</span><span class="cm"> * Forward declaration of guess API.
</span><span class="cm"> * @param  num   your guess
</span><span class="cm"> * @return 	     -1 if num is lower than the guess number
</span><span class="cm"> *			      1 if num is higher than the guess number
</span><span class="cm"> *               otherwise return 0
</span><span class="cm"> * int guess(int num);
</span><span class="cm"> */</span>

<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">guessNumber</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>

        <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;=</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// detail 1
</span><span class="c1"></span>            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">((</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span> <span class="c1">// detail 2
</span><span class="c1"></span>            <span class="kt">int</span> <span class="n">rlt</span> <span class="o">=</span> <span class="n">guess</span><span class="p">(</span><span class="n">mid</span><span class="p">);</span>

            <span class="k">if</span> <span class="p">(</span><span class="n">rlt</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span> <span class="n">mid</span><span class="p">;</span>
            <span class="p">}</span>
			<span class="c1">// detail 3
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">rlt</span> <span class="o">==</span> <span class="o">-</span><span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>  <span class="k">else</span> <span class="p">{</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="关键技术细节">关键技术细节</h3>
<blockquote>
<p><em>Although the basic idea of binary search is comparatively straightforward, the details can be surprisingly tricky</em>  &ndash; <strong>Donald Knuth</strong></p>
</blockquote>
<p>就像高德纳所说，二分法的思想简单且易于理解，但是二分法的细节却藏了很多坑，<strong>魔鬼就在细节中</strong>。为了透彻理解二分法的实现，有必要对上面的代码的下面3个技术细节（标记为<code>detail</code>注释的地方）进行深究。</p>
<h4 id="循环的入口条件">循环的入口条件</h4>
<p>代码16行，为什么循环的入口条件是<code>left &lt;= right</code>？</p>
<blockquote>
<p>无论何时$[left, right]$表示<strong>可能包含目标值</strong>的搜索区间</p>
</blockquote>
<p>注意这是个<strong>左闭右闭</strong>的闭区间，单纯从数学角度出发，这个区间<strong>最短的长度就是1</strong>，也就是$left = right$的时候。如果$left &gt;  right$了，那$[left, right]$就是<strong>空集</strong>，这个集合<strong>肯定不包含目标值</strong>，也就<strong>没有继续搜索的必要</strong>了，所以循环退出。</p>
<h4 id="中点计算">中点计算</h4>
<p>为什么是<code>mid = left + ((right - left) &gt;&gt; 1)</code>，也就是数学的$floor((left + right) / 2)$?
这里的中点转换成数学表示就是
$$
\begin{align}
mid = \left \lfloor\frac{left + right}{2}  \right \rfloor
\end{align}
$$
其实，我们还有另外一种选择，将中间值定为
$$
\begin{align}
mid = \left \lceil\frac{left + right}{2}  \right \rceil
\end{align}
$$
第2种方式的中点值的选择是否可行？从后面的分析，**其实是可行的。**那这两个计算公式有什么区别？最大的区别在于$right = left + 1$的时候，也就是搜索区间长度为2左右端点挨着的时候，如下图所示，下一次循环计算mid，第1个公式结果是$mid = 4$，而第2个公式的结果是$mid = 5$，</p>
<p></p>
<p>，第1个公式$mid = \left \lfloor\frac{left + right}{2}  \right \rfloor = \left \lfloor\frac{left + left + 1}{2}  \right \rfloor = left$，而第2个公式$mid = \left \lceil\frac{left + right}{2}  \right \rceil = \left \lceil\frac{left + left + 1}{2}  \right \rceil = left + \lceil 0.5\rceil = left + 1 = right$，请记住这个重要的结论。</p>
<blockquote>
<p>当搜索区间的<strong>左右两端点挨着</strong>的时候（即$right = left + 1)$，floor函数计算的中点mid是left，ceil函数计算的中点mid是right</p>
</blockquote>
<p>请记住这个<strong>特殊的区间情况</strong>，至于为何基础模板选择floor而没有选择ceil，在后面的变化类型一节很关键。</p>
<h4 id="搜索区间调整">搜索区间调整</h4>
<p>在每次判断与target的差距之后，搜索区间为什么是这么调整的？
二分法另一个容易搞错的问题是区间调整，$left$和$right$好像可以选择$mid$的3个边界值$mid, mid - 1, mid + 1$中的任意一个，其实<strong>调整的原则</strong>很简单，</p>
<blockquote>
<ol>
<li><strong>排除</strong>target不可能存在的区间，<strong>保留</strong>可能存在的区间</li>
<li>保证<strong>任意判断分支为true时最后都可以跳出循环，尤其当$right = left + 1$时</strong></li>
</ol>
</blockquote>
<p>先看第1条原则，基础模板中，根据mid的值与目标值的差距，搜索区间$[left, right]$的调整有3个判断分支：</p>
<ol>
<li>如果和目标值相同$A[mid] = A[target]$，直接<strong>跳出循环</strong>，返回mid(代码第21行)；</li>
<li>如果比目标值大$A[mid] &gt; A[target]$，那么肯定$target &lt; mid$，所以$target \le mid - 1$，因此$target$位于区间$[left, mid - 1]$上，更新$right = mid - 1$；</li>
<li>如果比目标值小$A[mid] &lt; A[target]$，那么肯定$target &gt; mid$，所以$target \ge mid + 1$，因此$target$位于区间$[mid + 1， right]$上更新$left = mid + 1$。</li>
</ol>
<p>区间的调整仅仅保留了$target$可能存在的部分。</p>
<p>分支3的调整情况，看如下图示</p>
<p></p>
<p>考察第2条原则，<strong>是否可以退出循环</strong>？这个循环的退出条件是$left &gt; right$。对照上面的3个判断分支分别为true的情况：</p>
<ol>
<li>第1个判断分支直接退出循环，符合条件；</li>
<li>同理，第2个判断分支每次判断之后$right$在变小，所以必然在若干次之后比$left$小，直至退出循环</li>
<li>第3个判断分支每次调整之后$left$在变大，所以所以必然在若干次之后比$right$大，直至退出循环</li>
</ol>
<p>所以随着区间的调整，必然会在某一步满足退出的条件。<strong>特别的</strong>，当$right = left + 1$时，$mid = left$；</p>
<ul>
<li>第2个判断分支，$right = mid - 1 = left - 1 = right - 2 &lt; left = right - 1$，跳出循环</li>
<li>第3个判断分支，$left = mid + 1 = left + 1 = right$，再次进入循环，此时$mid = left = right$，$left = mid + 1 = right + 1 &gt; right$，可以看到在迭代2次之后也退出循环</li>
</ul>
<p>第2条原则满足。</p>
<hr>
<p>结合上面的分析，二分法的步骤包括：</p>
<p>从$A[mid]$与$target$的大小判断入手，判断它们的各种大小关系分支，确定每个判断分支的区间调整策略，需要满足下面的两条原则</p>
<blockquote>
<ol>
<li><strong>排除</strong>target不可能存在的区间，<strong>保留</strong>可能存在的区间</li>
<li>保证<strong>任意判断分支为true时最后都可以跳出循环，尤其当$right = left + 1$时</strong></li>
</ol>
</blockquote>
<h3 id="深入探究">深入探究</h3>
<p>上一小节讨论了3个关键技术细节，循环入口条件、中点计算和搜索区间调整，下面可以看到在满足上面的原则基础上，它们都可以变化。</p>
<h4 id="分支合并">分支合并</h4>
<p>当前的基础代码有3个判断分支，是否可以将3个分支合并成2个呢？下面的基础模板就可以。</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">guessNumber</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>

        <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 退出条件变了
</span><span class="c1"></span>            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">((</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
            <span class="c1">// 调整策略的分支从3个变成了2个
</span><span class="c1"></span>            <span class="k">if</span> <span class="p">(</span><span class="n">guess</span><span class="p">(</span><span class="n">mid</span><span class="p">)</span> <span class="o">&lt;=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
		<span class="c1">// 返回的条件也变了
</span><span class="c1"></span>        <span class="k">if</span> <span class="p">(</span><span class="n">guess</span><span class="p">(</span><span class="n">left</span><span class="p">)</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">left</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>再仔细考察一下，上面的代码，3个地方发生变化（已经在注释种标出）依然可以通过测试，其实还是按照上面的2个原则来看。</p>
<ol>
<li>
<p>每次调整区间，<strong>排除</strong>target不可能存在的区间，<strong>保留</strong>可能存在的区间</p>
<p>重新分析之前的3个判断分支，比较特殊是第1点，如果$A[mid] = A[target]$，那么$mid = target$，很明显</p>
<ul>
<li>判断分支1与判断分支2合并，当$A[mid] \ge A[target]$，$target \le mid$，所以$target$<strong>可能位于</strong>$[left, mid]$区间，调整$right = mid$，注意此处$right \ne mid -1$</li>
<li>判断分支1与判断分支3合并，当$A[mid] \le A[target]$，$target \ge mid$，所以$target$<strong>可能位于</strong>$[mid, right]$区间，调整$left = mid$，注意此处$left \ne mid +1$</li>
</ul>
<p>这两个策略看起来似乎都可以，结合其他两种情况，如果将3个分支合并为2个，应该有2种调整策略</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># solution 1，另一种正确的方案</span>
<span class="k">function</span> binary_search_alternative<span class="o">(</span>A, n, T<span class="o">)</span> is
    L :<span class="o">=</span> <span class="m">0</span>
    R :<span class="o">=</span> n − <span class="m">1</span>
    <span class="k">while</span> L &lt; R <span class="k">do</span>
        m :<span class="o">=</span> floor<span class="o">((</span>L + R<span class="o">)</span> / 2<span class="o">)</span>
        <span class="k">if</span> A<span class="o">[</span>m<span class="o">]</span> &gt;<span class="o">=</span> T <span class="k">then</span>
            R :<span class="o">=</span> m
        <span class="k">else</span>:
            L :<span class="o">=</span> m + <span class="m">1</span>
    <span class="k">if</span> A<span class="o">[</span>L<span class="o">]</span> <span class="o">=</span> T <span class="k">then</span>
        <span class="k">return</span> L
    <span class="k">return</span> unsuccessful
</code></pre></td></tr></table>
</div>
</div><p>或者</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># solution 2，错误示范</span>
<span class="k">function</span> binary_search_alternative<span class="o">(</span>A, n, T<span class="o">)</span> is
    L :<span class="o">=</span> <span class="m">0</span>
    R :<span class="o">=</span> n − <span class="m">1</span>
    <span class="k">while</span> L &lt; R <span class="k">do</span>
        m :<span class="o">=</span> floor<span class="o">((</span>L + R<span class="o">)</span> / 2<span class="o">)</span>
        <span class="k">if</span> A<span class="o">[</span>m<span class="o">]</span> &lt;<span class="o">=</span> T <span class="k">then</span>
            L :<span class="o">=</span> m
        <span class="k">else</span>:
            R :<span class="o">=</span> m - <span class="m">1</span>
    <span class="k">if</span> A<span class="o">[</span>L<span class="o">]</span> <span class="o">=</span> T <span class="k">then</span>
        <span class="k">return</span> L
    <span class="k">return</span> unsuccessful
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>保证<strong>任意判断分支为true时最后都可以跳出循环，尤其当$right = left + 1$时</strong></p>
<p>我们再看上面的两种伪代码，退出的条件是$left &gt;= right$，直接考察$left = right -1$的情况，如果在搜索的若干步之后搜索的区间变成下面的情况</p>
<p></p>
<p>下一步搜索的$mid = 4$，按照方案2，如果此时</p>
<ol>
<li>第2个判断分支为true，$right = mid - 1 = 3 &lt; left$，退出循环；</li>
<li>第1个判断分支为true（代码第7~8行），那么调整$left = mid = 4$，再次进入之后<strong>会发现陷入死循环</strong>，核心原因在于中点的选择上，因为使用的是floor函数，导致left永远恒等于mid，换句或说，$left$永远不再增加，而且也进不到更新$right$的分支，陷入死循环，考察方案1就没有这种情况。</li>
</ol>
<p>所以方案2的结果是错的。</p>
</li>
</ol>
<h4 id="中点计算变更">中点计算变更</h4>
<p>上面的方案2，因为不满足第2条原则而失败，那有没有办法通过改变其他部分而满足原则呢？第1个判断分支如果为true，当$right = left + 1$时，根据代码第6行，$mid = left$，所以进入分支之后$left = mid = left$，那可以将第6行的代码改成下面这样，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="c1"># solution 3，solution 2的改造</span>
<span class="k">function</span> binary_search_alternative<span class="o">(</span>A, n, T<span class="o">)</span> is
    L :<span class="o">=</span> <span class="m">0</span>
    R :<span class="o">=</span> n − <span class="m">1</span>
    <span class="k">while</span> L &lt; R <span class="k">do</span>
        m :<span class="o">=</span> ceil<span class="o">((</span>L + R<span class="o">)</span> / 2<span class="o">)</span> <span class="c1"># ceil取代floor函数</span>
        <span class="k">if</span> A<span class="o">[</span>m<span class="o">]</span> &lt;<span class="o">=</span> T <span class="k">then</span>
            L :<span class="o">=</span> m
        <span class="k">else</span>:
            R :<span class="o">=</span> m - <span class="m">1</span>
    <span class="k">if</span> A<span class="o">[</span>L<span class="o">]</span> <span class="o">=</span> T <span class="k">then</span>
        <span class="k">return</span> L
    <span class="k">return</span> unsuccessful
</code></pre></td></tr></table>
</div>
</div><p>再考察一下上面的搜索区间左右端点相邻的情况，下一次搜索的$mid = 5$，无论走哪一个判断分支，最终$left = right$，跳出循环，所以对于第2条原则需要补充</p>
<blockquote>
<p>可以通过调整中点的计算方式，满足原则2，从而避免死循环</p>
</blockquote>
<h4 id="判断条件变更">判断条件变更</h4>
<p>需要注意，其他2个的模板的循环条件为$left &lt; right$，当$left \ge right$时退出，如果$left = right$，那么搜索的区间只剩下一个元素，跳出循环之后别忘了要检查这个元素是否满足条件。如果最后的这个元素依然不是target，那么所有的元素也不是了，所以在最后我们加了一个判断，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">    <span class="k">if</span> A<span class="o">[</span>L<span class="o">]</span> <span class="o">=</span> T <span class="k">then</span>
        <span class="k">return</span> L
    <span class="k">return</span> unsuccessful
</code></pre></td></tr></table>
</div>
</div><h2 id="变种题目">变种题目</h2>
<p>理解上面的分析过程之后，进入进阶版的二分法题目。</p>
<h3 id="重复元素左边界">重复元素左边界</h3>
<p>参考<a href="https://leetcode-cn.com/problems/first-bad-version/?utm_source=LCUS&amp;utm_medium=ip_redirect&amp;utm_campaign=transfer2china" target="_blank" rel="noopener noreffer">278. 第一个错误的版本</a>，从某个版本开始，版本就已经不可用了，但是在这个版本之前，所有的版本均可用，需要找出第一个不可用的版本。假如说，我们有100个版本，从第70个版本开始不用，那么怎么快速找到70呢？如下所示</p>
<p></p>
<p>题目要找到最左边第一个true对应的下标70，也是找到重复的<code>true</code>区间的左边界。初始化$left = 0, right = 100$，我们还是<strong>从判断分支入手</strong>，</p>
<ol>
<li>如果$A[mid] = true$，那么$target$可能位于$[mid + 1, right]$区间，调整$left = mid + 1$；</li>
<li>如果$A[mid] = false$，$mid$可能是$target$，但是$mid + 1$不会是$target$（因为我们要找的是最左边的那个FALSE），那么$target$可能位于$[left, mid]$区间，调整$right = mid$</li>
</ol>
<p>结合中点的计算原则$mid = floor((left + right)/ 2)$，判断$right = left + 1$时候，2个判断分支最终都可以跳出循环。最终代码如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="c1">// The API isBadVersion is defined for you.
</span><span class="c1">// bool isBadVersion(int version);
</span><span class="c1"></span>
<span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">firstBadVersion</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>

        <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">((</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">isBadVersion</span><span class="p">(</span><span class="n">mid</span><span class="p">)</span> <span class="o">==</span> <span class="nb">false</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">left</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>更一般的，假如我们要查找序列$[1,2,3,4,4,5,6,6,7,7,9,10,10,10]$中的<strong>最左边</strong>的10的index，该如何处理？从分支判断入手，</p>
<ol>
<li>如果$A[mid] \lt 10$，那么10可能位于区间$[mid + 1, right]$区间，调整$left = mid + 1$；</li>
<li>如果$A[mid] =  10$，那么10可能位于区间$[left, mid]$区间，调整$right = mid$；</li>
<li>如果$A[mid] \gt  10$，那么10可能位于区间$[left, mid - 1]$区间，调整$right = mid - 1$</li>
</ol>
<p>合并分支2和分支3，变成</p>
<ol>
<li>如果$A[mid] \lt 10$，那么10可能位于区间$[mid + 1, right]$区间，调整$left = mid + 1$；</li>
<li>如果$A[mid] \ge  10$，那么10可能位于区间$[left, mid]$区间，调整$right = mid$</li>
</ol>
<p>判断当$left = right - 1$时，两个分支都可以顺利退出。代码如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">CheckVal</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>

        <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">((</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">==</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">left</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="重复元素右边界">重复元素右边界</h3>
<p>假如我们要查找序列$[1,2,3,4,4,5,6,6,7,7,9,10,10,10]$中的<strong>最右边</strong>的10的index，该如何处理？从分支判断入手，</p>
<ol>
<li>如果$A[mid] \lt 10$，那么最右边的10可能位于区间$[mid + 1, right]$区间，调整$left = mid + 1$；</li>
<li>如果$A[mid] =  10$，这个$A[mid]$可能是最右边的10，也可能不是，但是$A[mid - 1]$肯定不是最右边的10了，所以目标值可能位于区间$[mid, right]$区间，调整$left = mid$；</li>
<li>如果$A[mid] \gt  10$，那么最右边的10可能位于区间$[left, mid - 1]$区间，调整$right = mid - 1$</li>
</ol>
<p>合并分支1和分支2，变成</p>
<ol>
<li>如果$A[mid] \le 10$，那么10可能位于区间$[mid, right]$区间，调整$left = mid$；</li>
<li>如果$A[mid] \gt  10$，那么10可能位于区间$[left, mid - 1]$区间，调整$right = mid - 1$</li>
</ol>
<p>判断当$left = right - 1$时，按照floor函数计算，第1个分支会陷入死循环，所以需要调整中点的计算方式为ceil，判断两个分支都可以顺利退出，所以代码如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">CheckVal</span><span class="p">(</span><span class="kt">int</span> <span class="n">n</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">n</span><span class="p">;</span>

        <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">((</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&lt;=</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">A</span><span class="p">[</span><span class="n">left</span><span class="p">]</span> <span class="o">==</span> <span class="mi">10</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">left</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><h3 id="旋转数组无重复元素">旋转数组（无重复元素）</h3>
<p>来做文章目标中的<a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array/" target="_blank" rel="noopener noreffer">153. 寻找旋转排序数组中的最小值</a>这道题，具体看看示例2中的题目怎么做</p>
<p></p>
<p>具体的值和index的分布如下所示</p>
<p></p>
<ol>
<li>
<p>初始化搜索范围，$left = 0, right = n - 1 = 6$；</p>
</li>
<li>
<p>$mid = 3$，从判断$A[3] = 7$与$target$的值入手，但是比较棘手的是$target$是多少呢（我们不知道最小值是0，仅仅知道这是一个旋转序列）？那我们根据什么判断$target$存在的可能区间呢？注意下面这幅图
</p>
</li>
</ol>
<p>这个旋转数组分为前后两个区间，前面区间每一个数字都比后面区间的数字大（因为没有重复数字），分别称为高半区间和低半区间。很明显，</p>
<ol>
<li>最小值一定在低半区间，且位于低半区间的起始点上；</li>
<li>我们不知道低半区间的起始点在哪里，也不知道高半区间的终点在哪里；</li>
<li>我们可以根据当前元素与数组最后一个元素（想想为什么不是第一个元素）的大小确认出具体位于哪个半区间，如果$A[id] &gt; A[n - 1]$，那么在高半区间，否则在低半区间。</li>
</ol>
<p>那这个和判断$target$所在区间有什么关系呢？如果$mid$位于高半区间，那么可以肯定最小值肯定不在$[left, mid]$中，更新$left = mid + 1$，如果位于低半区间，可以肯定$[mid+ 1, right]$不可能是最小值，更新$right = mid$。于是有下面的代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">findMin</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span> <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="mi">0</span><span class="p">];</span>
        <span class="kt">int</span> <span class="n">left</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">right</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">left</span> <span class="o">&lt;</span> <span class="n">right</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">mid</span> <span class="o">=</span> <span class="n">left</span> <span class="o">+</span> <span class="p">((</span><span class="n">right</span> <span class="o">-</span> <span class="n">left</span><span class="p">)</span> <span class="o">&gt;&gt;</span> <span class="mi">1</span><span class="p">);</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">mid</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">])</span> <span class="p">{</span>
                <span class="n">left</span> <span class="o">=</span> <span class="n">mid</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
                <span class="n">right</span> <span class="o">=</span> <span class="n">mid</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="n">left</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><ol start="3">
<li>判断是否在$right = left +1$时，每个分支可以跳出循环，可以👍，完毕。</li>
</ol>
<h3 id="旋转数组-包含重复元素左边界">旋转数组（ 包含重复元素）左边界</h3>
<p>再来看<a href="https://leetcode-cn.com/problems/find-minimum-in-rotated-sorted-array-ii/" target="_blank" rel="noopener noreffer">154. 寻找旋转排序数组中的最小值 II - 力扣（LeetCode）</a>，这个题目与上面有点区别，就是它有重复元素，如下图</p>
<p></p>
<p>看起来可以按照上面的题目如法炮制，判断$A[mid]$与$A[n -1]$的大小，</p>
<ol>
<li>
<p>如果$A[mid] &gt; A[n -1]$，$mid$位于高半区间，则最小值肯定不在$[left, mid]$里面，更新$left = mid + 1$；</p>
</li>
<li>
<p>如果$A[mid] &lt; A[n -1]$，$mid$位于低半区间，则最小值肯定不在$[mid +1, right]$里面，更新$right = mid$；</p>
</li>
<li>
<p>如果$A[mid] = A[n-1]$，这个时候就说不清楚$mid$是在高区间还是低区间了。因为可能有下面的情况</p>
<p></p>
<p>再仔细想想，其实在这一步，我们不需要知道我们位于哪个区间，我们要清楚$mid$跟最小值的index的关系，参考下面的图</p>
<p></p>
<p>考虑数组中的最后一个元素$A[right]$，在最小值右侧的元素，它们的值一定都小于等于$A[right]$；而在最小值左侧的元素，它们的值一定都大于等于 $A[right]$。假定中点为$pilot$，比较$A[pilot]$与$A[right]$的大小，可以间接判断出$pilot$和$target$的位置关系。</p>
<p>第一种情况，$A[pilot]&lt;A[high]$，说明此时最小的点位于$pilot$的左边，所以更新$right = pilot$；</p>
<p></p>
<p>第二种情况，$A[pilot]&gt;A[high]$，说明此时最小的点位于$pilot$的右边，所以更新$left = pilot + 1$；</p>
<p></p>
<p>第三种情况，$A[pilot]=A[high]$，此时唯一可以确定的是最小值在$high$的左边，所以更新$right = right - 1$</p>
<p></p>
</li>
</ol>
<p>则有如下的答案</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-cpp" data-lang="cpp"><span class="k">class</span> <span class="nc">Solution</span> <span class="p">{</span>
<span class="k">public</span><span class="o">:</span>
    <span class="kt">int</span> <span class="n">findMin</span><span class="p">(</span><span class="n">vector</span><span class="o">&lt;</span><span class="kt">int</span><span class="o">&gt;&amp;</span> <span class="n">nums</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">int</span> <span class="n">low</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="kt">int</span> <span class="n">high</span> <span class="o">=</span> <span class="n">nums</span><span class="p">.</span><span class="n">size</span><span class="p">()</span> <span class="o">-</span> <span class="mi">1</span><span class="p">;</span>
        <span class="k">while</span> <span class="p">(</span><span class="n">low</span> <span class="o">&lt;</span> <span class="n">high</span><span class="p">)</span> <span class="p">{</span>
            <span class="kt">int</span> <span class="n">pivot</span> <span class="o">=</span> <span class="n">low</span> <span class="o">+</span> <span class="p">(</span><span class="n">high</span> <span class="o">-</span> <span class="n">low</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">;</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">pivot</span><span class="p">]</span> <span class="o">&lt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">high</span><span class="p">])</span> <span class="p">{</span>
                <span class="n">high</span> <span class="o">=</span> <span class="n">pivot</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">nums</span><span class="p">[</span><span class="n">pivot</span><span class="p">]</span> <span class="o">&gt;</span> <span class="n">nums</span><span class="p">[</span><span class="n">high</span><span class="p">])</span> <span class="p">{</span>
                <span class="n">low</span> <span class="o">=</span> <span class="n">pivot</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
            <span class="k">else</span> <span class="p">{</span>
                <span class="n">high</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">;</span>
            <span class="p">}</span>
        <span class="p">}</span>
        <span class="k">return</span> <span class="n">nums</span><span class="p">[</span><span class="n">low</span><span class="p">];</span>
    <span class="p">}</span>
<span class="p">};</span>
</code></pre></td></tr></table>
</div>
</div><p>考察$right = left + 1$时候，三个分支都可以顺利跳出循环，搞定👍</p>
<h2 id="参考资料">参考资料</h2>
<ol>
<li><a href="https://segmentfault.com/a/1190000016825704" target="_blank" rel="noopener noreffer">二分查找、二分边界查找算法的模板代码总结 - SegmentFault 思否</a>，给我很多启发的一篇文章</li>
<li><a href="https://en.wikipedia.org/wiki/Binary_search_algorithm" target="_blank" rel="noopener noreffer">Binary search algorithm</a>，维基百科页面，英文版里面的内容很详尽</li>
</ol>
<hr>
<figure><figcaption>
            <h4>欢迎扫码关注我的公众号</h4>
        </figcaption>
</figure>]]></description>
</item></channel>
</rss>
