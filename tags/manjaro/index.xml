<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>manjaro - 标签 - Dive Into Think</title>
        <link>https://bugxch.github.io/tags/manjaro/</link>
        <description>manjaro - 标签 - Dive Into Think</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>bugxch@126.com (bugxch)</managingEditor>
            <webMaster>bugxch@126.com (bugxch)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 26 Jul 2020 08:12:22 &#43;0800</lastBuildDate><atom:link href="https://bugxch.github.io/tags/manjaro/" rel="self" type="application/rss+xml" /><item>
    <title>使用linux vs code调试C&#43;&#43;程序</title>
    <link>https://bugxch.github.io/manjarovscode/</link>
    <pubDate>Sun, 26 Jul 2020 08:12:22 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://bugxch.github.io/manjarovscode/</guid>
    <description><![CDATA[<p>最近练习leetcode编程，我希望在manjaro系统的vs code上可以单步调试C++代码，找了很多资料都不能正常运行，所以参考<a href="https://code.visualstudio.com/docs/cpp/cpp-debug" target="_blank" rel="noopener noreffer">官方资料</a>自己整好了，记录一下。</p>
<h2 id="预置条件">预置条件</h2>
<p>首先完成如下工作</p>
<ol>
<li>
<p>安装vs code;</p>
</li>
<li>
<p>安装插件，如下图所示</p>
<p></p>
</li>
<li>
<p>确认linux系统已经正确安装gcc，输入如下命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">gcc -v <span class="c1"># 查看gcc版本</span>
sudo pacman -S build-essential gdb <span class="c1"># 安装必要工具軟件</span>
</code></pre></td></tr></table>
</div>
</div></li>
</ol>
<h2 id="创建hello-world工程">创建Hello world工程</h2>
<p>在本地创建目录，我在本地创建了leetcode的目录，所以有如下的步骤</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">mkdir project
<span class="nb">cd</span> project
mkdir 
<span class="nb">cd</span> helloworld
code . <span class="c1"># 在当前目录下打开vs code，当前打开的文件夹就是这个“工作空间”</span>
</code></pre></td></tr></table>
</div>
</div><p>阅读完本博客之后，你会在当前的目录下面创建下面的3个文件</p>
<ul>
<li><code>tasks.json</code> (compiler build settings)</li>
<li><code>launch.json</code> (debugger settings)</li>
</ul>
<h3 id="添加源文件">添加源文件</h3>
<p>如图所示，添加新的源文件<code>helloworld.cpp</code></p>
<p></p>
<p>在该文件中粘贴如下的源代码</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-c++" data-lang="c++"><span class="cp">#include</span> <span class="cpf">&lt;iostream&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;vector&gt;</span><span class="cp">
</span><span class="cp">#include</span> <span class="cpf">&lt;string&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="k">using</span> <span class="k">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">vector</span><span class="o">&lt;</span><span class="n">string</span><span class="o">&gt;</span> <span class="n">msg</span> <span class="p">{</span><span class="s">&#34;Hello&#34;</span><span class="p">,</span> <span class="s">&#34;C++&#34;</span><span class="p">,</span> <span class="s">&#34;World&#34;</span><span class="p">,</span> <span class="s">&#34;from&#34;</span><span class="p">,</span> <span class="s">&#34;VS Code&#34;</span><span class="p">,</span> <span class="s">&#34;and the C++ extension!&#34;</span><span class="p">};</span>

    <span class="k">for</span> <span class="p">(</span><span class="k">const</span> <span class="n">string</span><span class="o">&amp;</span> <span class="nl">word</span> <span class="p">:</span> <span class="n">msg</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">word</span> <span class="o">&lt;&lt;</span> <span class="s">&#34; &#34;</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>然后保存该文件。</p>
<p></p>
<h3 id="构建helloworldcpp">构建helloworld.cpp</h3>
<p>接下来，你将创建一个<code>task.json</code>文件告诉VS code如何构建(编译)当前的程序。这将触发g++编译器按照源代码创建一个可执行程序。在主菜单选择<strong>终端-&gt;配置默认生成任务</strong>，然后在下拉菜单选择g++ build active file，如下图所示</p>
<p></p>
<p>你将在<code>.vscode</code>文件夹下面看到<code>tasks.json</code>文件，我们进一步编辑这个文件</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
	<span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;2.0.0&#34;</span><span class="p">,</span>
	<span class="nt">&#34;tasks&#34;</span><span class="p">:</span> <span class="p">[</span>
		<span class="p">{</span>
			<span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;shell&#34;</span><span class="p">,</span>
			<span class="nt">&#34;label&#34;</span><span class="p">:</span> <span class="s2">&#34;C/C++: g++ build active file&#34;</span><span class="p">,</span>
			<span class="nt">&#34;command&#34;</span><span class="p">:</span> <span class="s2">&#34;/usr/bin/g++&#34;</span><span class="p">,</span>
			<span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">[</span>
				<span class="s2">&#34;-g&#34;</span><span class="p">,</span>
				<span class="s2">&#34;${file}&#34;</span><span class="p">,</span>
				<span class="s2">&#34;-o&#34;</span><span class="p">,</span>
				<span class="s2">&#34;${fileDirname}/${fileBasenameNoExtension}&#34;</span>
			<span class="p">],</span>
			<span class="nt">&#34;options&#34;</span><span class="p">:</span> <span class="p">{</span>
				<span class="nt">&#34;cwd&#34;</span><span class="p">:</span> <span class="s2">&#34;${workspaceFolder}&#34;</span>
			<span class="p">},</span>
			<span class="nt">&#34;problemMatcher&#34;</span><span class="p">:</span> <span class="p">[</span>
				<span class="s2">&#34;$gcc&#34;</span>
			<span class="p">],</span>
			<span class="nt">&#34;group&#34;</span><span class="p">:</span> <span class="p">{</span>
				<span class="nt">&#34;kind&#34;</span><span class="p">:</span> <span class="s2">&#34;build&#34;</span><span class="p">,</span>
				<span class="nt">&#34;isDefault&#34;</span><span class="p">:</span> <span class="kc">true</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><blockquote>
<p>关于json文件中变量的具体含义可以进一步参考<a href="https://code.visualstudio.com/docs/editor/variables-reference" target="_blank" rel="noopener noreffer">Visual Studio Code Variables Reference</a></p>
</blockquote>
<p>文件中的指令指定了程序如何运行，当前文件中的<code>args</code>参数指定了传输给gcc的参数，这些参数必须按照编译器期望的顺序排列。</p>
<p>这个任务告诉g++将源文件<code>${file}</code>编译，在当前文件夹下面创建可执行文件<code>helloword</code>，注意可执行文件的名称和源文件相同，但是去掉了扩展后缀名。<code>label</code>字段表示你能看到的任务列表，你可以写成任何你想写的东西。<code>group</code>中的<code>&quot;isDefault&quot;: true</code>表示你可以使用<code>Ctrl+Shift+B</code>运行该任务，这个仅仅是为了使用上的方便，你依然可以通过菜单中的选项运行该任务。</p>
<h3 id="运行编译程序">运行编译程序</h3>
<p>回到原来的<code>helloworld.cpp</code>程序，按下<code>Ctrl+Shift+B</code>运行该任务，请留意编辑器下方的终端的打印，在任务运行结束之后一般会提示成功或者失败，如果运行顺利，你可以看到如下的提示</p>
<p></p>
<p>如果留意可以看到当前的文件夹中已经生成了可执行程序<code>helloworld</code>文件，打开新的终端，即可运行该程序</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">./helloworld <span class="c1"># 运行可执行程序</span>
</code></pre></td></tr></table>
</div>
</div><p></p>
<h3 id="修改tasksjson">修改tasks.json</h3>
<p>你可以修改这个文件中的参数，比如将<code>${workspaceFolder}/*.cpp</code>替换<code>${file}</code>，或者也可以将<code>${fileDirname}/${fileBasenameNoExtension}</code>替换成一个硬编码的程序名称<code>helloworld.out</code>。</p>
<h3 id="调试源程序">调试源程序</h3>
<p>接下来你将创建<code>launch.json</code>文件，当按下<code>F5</code>的时候VS Code调用GDB的调试器用于调试程序。找到菜单中的<strong>运行 &gt; 添加配置</strong>，然后选择<strong>C++ (GDB/LLDB)</strong>，如下图所示</p>
<p></p>
<p>我们选择<strong>g++ build and debug active file</strong>，你可以看到此处VS Code自动创建了文件<code>launch.json</code>文件，文件的内容如下</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt"> 1
</span><span class="lnt"> 2
</span><span class="lnt"> 3
</span><span class="lnt"> 4
</span><span class="lnt"> 5
</span><span class="lnt"> 6
</span><span class="lnt"> 7
</span><span class="lnt"> 8
</span><span class="lnt"> 9
</span><span class="lnt">10
</span><span class="lnt">11
</span><span class="lnt">12
</span><span class="lnt">13
</span><span class="lnt">14
</span><span class="lnt">15
</span><span class="lnt">16
</span><span class="lnt">17
</span><span class="lnt">18
</span><span class="lnt">19
</span><span class="lnt">20
</span><span class="lnt">21
</span><span class="lnt">22
</span><span class="lnt">23
</span><span class="lnt">24
</span><span class="lnt">25
</span><span class="lnt">26
</span><span class="lnt">27
</span><span class="lnt">28
</span><span class="lnt">29
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
    <span class="err">//</span> <span class="err">使用</span> <span class="err">IntelliSense</span> <span class="err">了解相关属性。</span> 
    <span class="err">//</span> <span class="err">悬停以查看现有属性的描述。</span>
    <span class="err">//</span> <span class="err">欲了解更多信息，请访问:</span> <span class="err">https://go.microsoft.com/fwlink/?linkid=830387</span>
    <span class="nt">&#34;version&#34;</span><span class="p">:</span> <span class="s2">&#34;0.2.0&#34;</span><span class="p">,</span>
    <span class="nt">&#34;configurations&#34;</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="nt">&#34;name&#34;</span><span class="p">:</span> <span class="s2">&#34;g++ - 生成和调试活动文件&#34;</span><span class="p">,</span>
            <span class="nt">&#34;type&#34;</span><span class="p">:</span> <span class="s2">&#34;cppdbg&#34;</span><span class="p">,</span>
            <span class="nt">&#34;request&#34;</span><span class="p">:</span> <span class="s2">&#34;launch&#34;</span><span class="p">,</span>
            <span class="nt">&#34;program&#34;</span><span class="p">:</span> <span class="s2">&#34;${fileDirname}/${fileBasenameNoExtension}&#34;</span><span class="p">,</span>
            <span class="nt">&#34;args&#34;</span><span class="p">:</span> <span class="p">[],</span>
            <span class="nt">&#34;stopAtEntry&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
            <span class="nt">&#34;cwd&#34;</span><span class="p">:</span> <span class="s2">&#34;${workspaceFolder}&#34;</span><span class="p">,</span>
            <span class="nt">&#34;environment&#34;</span><span class="p">:</span> <span class="p">[],</span>
            <span class="nt">&#34;externalConsole&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">,</span>
            <span class="nt">&#34;MIMode&#34;</span><span class="p">:</span> <span class="s2">&#34;gdb&#34;</span><span class="p">,</span>
            <span class="nt">&#34;setupCommands&#34;</span><span class="p">:</span> <span class="p">[</span>
                <span class="p">{</span>
                    <span class="nt">&#34;description&#34;</span><span class="p">:</span> <span class="s2">&#34;为 gdb 启用整齐打印&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;text&#34;</span><span class="p">:</span> <span class="s2">&#34;-enable-pretty-printing&#34;</span><span class="p">,</span>
                    <span class="nt">&#34;ignoreFailures&#34;</span><span class="p">:</span> <span class="kc">true</span>
                <span class="p">}</span>
            <span class="p">],</span>
            <span class="nt">&#34;preLaunchTask&#34;</span><span class="p">:</span> <span class="s2">&#34;C/C++: g++ build active file&#34;</span><span class="p">,</span>
            <span class="nt">&#34;miDebuggerPath&#34;</span><span class="p">:</span> <span class="s2">&#34;/usr/bin/gdb&#34;</span>
        <span class="p">}</span>
    <span class="p">]</span>
<span class="p">}</span>
</code></pre></td></tr></table>
</div>
</div><p>很明显在这个文件中<code>program</code>指定了需要debug的程序，和之前的文件一样，此处就是没有后缀名的与源文件一样的程序，这个例子中就是<code>helloworld</code>。默认情况下，C++插件不会在代码中插入任何断点，所以<code>stopAtEntry</code>是<code>false</code>。如果将该项改为<code>true</code>，那么就可以让调试器停在主函数的断点处。</p>
<h3 id="开始调试">开始调试</h3>
<p>回到源文件，按下<code>F5</code>就可以开始调试了，在代码编辑器的上访可以看到调试的控制条，包括了单步调试，跳过调试，重启调试和停止调试的功能。稍微探索一下就可以发现，<code>F9</code>是添加断点，其他的调试方法鼠标悬停在上面都会显示快捷键，你看到的编辑器应该是这样的</p>
<p></p>
<p>调试中可以看到每个变量的值，以及监视窗口。</p>
<blockquote>
<p>需要注意的是，当前的版本（2019年3月份之后）不会在单步调试模式下将cout的结果打印出来，只有程序运行完成之后才会统一打印出来。</p>
</blockquote>]]></description>
</item><item>
    <title>Manjaro添加开机启动脚本</title>
    <link>https://bugxch.github.io/manjaro%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</link>
    <pubDate>Sun, 24 Feb 2019 20:48:23 &#43;0000</pubDate>
    <author>bugxch</author>
    <guid>https://bugxch.github.io/manjaro%E6%B7%BB%E5%8A%A0%E5%BC%80%E6%9C%BA%E5%90%AF%E5%8A%A8%E8%84%9A%E6%9C%AC/</guid>
    <description><![CDATA[<p>如何给manjaro添加开机启动脚本。</p>
<p></p>
<p>前段时间折腾小黑T450安装了Manjaro系统，又安装了sublime text 3，顺便参考<a href="https://packagecontrol.io/installation" target="_blank" rel="noopener noreffer">Installation Package Control指导</a>安装了package control插件，但是很不幸国内的package control页面已经被屏蔽了。因此，需要给package control设置代理，根据<a href="https://segmentfault.com/a/1190000007621085" target="_blank" rel="noopener noreffer">《SublimeText 安装 PackageControl 及 HTTP 代理配置 - Tony的技术笔记 - SegmentFault 思否》</a>我看到一个方法是配置完设置之后，在shell中运行的命令</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">polipo <span class="nv">socksParentProxy</span><span class="o">=</span>localhost:1080
</code></pre></td></tr></table>
</div>
</div><p>设置一下sublime text 3中的package control的代理就可以使用它安装插件了。但是每次开机之后都要敲入上面的命令，非常麻烦。</p>
<h2 id="安装过程">安装过程</h2>
<p>参考官方资料，按照如下的步骤设置了自动启动脚本</p>
<ol>
<li>
<p>新增一个autostart的桌面启动项，这一项开机后会随桌面启动</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="nb">cd</span> ~/.config/autostart
touch AutoExec.desktop
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>在创建的<code>AutoExec.desktop</code>中写入如下的内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span><span class="lnt">4
</span><span class="lnt">5
</span><span class="lnt">6
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell"><span class="o">[</span>Desktop Entry<span class="o">]</span>
<span class="nv">Type</span><span class="o">=</span>Application
<span class="nv">Exec</span><span class="o">=</span><span class="s2">&#34;/etc/AutoExec.sh&#34;</span>
<span class="nv">Terminal</span><span class="o">=</span>yes
<span class="nv">Name</span><span class="o">=</span>AutoExec
X-GNOME-Autostart-enabled<span class="o">=</span><span class="nb">true</span>
</code></pre></td></tr></table>
</div>
</div></li>
<li>
<p>创建开机自启动脚本<code>/etc/AutoExec.sh</code>，</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">sudo touch /etc/AutoExec.sh
chmod +x /etc/AutoExec.sh
</code></pre></td></tr></table>
</div>
</div><p>写入如下的内容</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre class="chroma"><code class="language-shell" data-lang="shell">polipo <span class="nv">socksParentProxy</span><span class="o">=</span>localhost:1080 <span class="p">&amp;</span>
</code></pre></td></tr></table>
</div>
</div><p>即在开机之后的后台自动启动。</p>
</li>
</ol>
<h2 id="参考资料">参考资料</h2>
<ul>
<li><a href="https://wiki.archlinux.org/index.php/Systemd" target="_blank" rel="noopener noreffer">systemd - ArchWiki</a>，官方资料</li>
<li><a href="https://bbs.archlinux.org/viewtopic.php?id=86815" target="_blank" rel="noopener noreffer">[Solved] Execute script on startup / Newbie Corner / Arch Linux Forums</a>，论坛资料</li>
<li><a href="https://segmentfault.com/a/1190000007621085" target="_blank" rel="noopener noreffer">SublimeText 安装 PackageControl 及 HTTP 代理配置 - Tony的技术笔记 - SegmentFault 思否</a></li>
</ul>]]></description>
</item></channel>
</rss>
